
LEDflash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dec  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08005f2c  08005f2c  00006f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800607c  0800607c  0000707c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006084  08006084  00007084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006088  08006088  00007088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  20000008  0800608c  00008008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000027c  20000090  08006114  00008090  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000030c  08006114  0000830c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012cdc  00000000  00000000  000080c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000263f  00000000  00000000  0001ad9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014a8  00000000  00000000  0001d3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000fad  00000000  00000000  0001e888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00023e28  00000000  00000000  0001f835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010f75  00000000  00000000  0004365d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e72e1  00000000  00000000  000545d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0013b8b3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005e30  00000000  00000000  0013b8f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000066  00000000  00000000  00141728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000090 	.word	0x20000090
 800015c:	00000000 	.word	0x00000000
 8000160:	08005f14 	.word	0x08005f14

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000094 	.word	0x20000094
 800017c:	08005f14 	.word	0x08005f14

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000558:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800055a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4313      	orrs	r3, r2
 8000562:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000568:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4013      	ands	r3, r2
 800056e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000570:	68fb      	ldr	r3, [r7, #12]
}
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
	...

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fd3f 	bl	8001008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f87b 	bl	8000684 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800058e:	f000 f8e3 	bl	8000758 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f963 	bl	800085c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000596:	f000 f8fd 	bl	8000794 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 800059a:	2000      	movs	r0, #0
 800059c:	f000 fba8 	bl	8000cf0 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80005a0:	2001      	movs	r0, #1
 80005a2:	f000 fba5 	bl	8000cf0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80005a6:	2002      	movs	r0, #2
 80005a8:	f000 fba2 	bl	8000cf0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80005ac:	2101      	movs	r1, #1
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 fc0c 	bl	8000dcc <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80005b4:	2101      	movs	r1, #1
 80005b6:	2001      	movs	r0, #1
 80005b8:	f000 fc08 	bl	8000dcc <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 80005bc:	2101      	movs	r1, #1
 80005be:	2002      	movs	r0, #2
 80005c0:	f000 fc04 	bl	8000dcc <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80005c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000670 <main+0xf0>)
 80005c6:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005ca:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80005cc:	4b28      	ldr	r3, [pc, #160]	@ (8000670 <main+0xf0>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80005d2:	4b27      	ldr	r3, [pc, #156]	@ (8000670 <main+0xf0>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80005d8:	4b25      	ldr	r3, [pc, #148]	@ (8000670 <main+0xf0>)
 80005da:	2200      	movs	r2, #0
 80005dc:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80005de:	4b24      	ldr	r3, [pc, #144]	@ (8000670 <main+0xf0>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80005e4:	4922      	ldr	r1, [pc, #136]	@ (8000670 <main+0xf0>)
 80005e6:	2000      	movs	r0, #0
 80005e8:	f000 fc60 	bl	8000eac <BSP_COM_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <main+0x76>
  {
    Error_Handler();
 80005f2:	f000 f975 	bl	80008e0 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 80005f6:	481f      	ldr	r0, [pc, #124]	@ (8000674 <main+0xf4>)
 80005f8:	f004 fe20 	bl	800523c <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_BLUE);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 fbb1 	bl	8000d64 <BSP_LED_On>
  BSP_LED_On(LED_GREEN);
 8000602:	2001      	movs	r0, #1
 8000604:	f000 fbae 	bl	8000d64 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 8000608:	2002      	movs	r0, #2
 800060a:	f000 fbab 	bl	8000d64 <BSP_LED_On>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    BSP_LED_Toggle(LED_BLUE);
 800060e:	2000      	movs	r0, #0
 8000610:	f000 fbc2 	bl	8000d98 <BSP_LED_Toggle>
    HAL_Delay(delay);
 8000614:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <main+0xf8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fd7b 	bl	8001114 <HAL_Delay>

    BSP_LED_Toggle(LED_GREEN);
 800061e:	2001      	movs	r0, #1
 8000620:	f000 fbba 	bl	8000d98 <BSP_LED_Toggle>
    HAL_Delay(delay);
 8000624:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <main+0xf8>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fd73 	bl	8001114 <HAL_Delay>

    BSP_LED_Toggle(LED_RED);
 800062e:	2002      	movs	r0, #2
 8000630:	f000 fbb2 	bl	8000d98 <BSP_LED_Toggle>
    HAL_Delay(delay);
 8000634:	4b10      	ldr	r3, [pc, #64]	@ (8000678 <main+0xf8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fd6b 	bl	8001114 <HAL_Delay>
    //BSP_JOY_GetState();
    /* USER CODE BEGIN 3 */
    uint32_t rawValue;

    // Start the ADC
    HAL_ADC_Start(&hadc1);
 800063e:	480f      	ldr	r0, [pc, #60]	@ (800067c <main+0xfc>)
 8000640:	f001 f8ee 	bl	8001820 <HAL_ADC_Start>

    // Wait for the conversion to finish
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8000644:	2164      	movs	r1, #100	@ 0x64
 8000646:	480d      	ldr	r0, [pc, #52]	@ (800067c <main+0xfc>)
 8000648:	f001 f971 	bl	800192e <HAL_ADC_PollForConversion>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d107      	bne.n	8000662 <main+0xe2>
    {
      // Get the 12-bit value (0-4095)
      rawValue = HAL_ADC_GetValue(&hadc1);
 8000652:	480a      	ldr	r0, [pc, #40]	@ (800067c <main+0xfc>)
 8000654:	f001 f9f8 	bl	8001a48 <HAL_ADC_GetValue>
 8000658:	6078      	str	r0, [r7, #4]

      // Print the value to the serial port, followed by a newline character.
      // This is the format NanoEdge AI Studio expects.
      printf("%lu\n", rawValue);
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	4808      	ldr	r0, [pc, #32]	@ (8000680 <main+0x100>)
 800065e:	f004 fded 	bl	800523c <iprintf>
    }

    // Stop the ADC
    HAL_ADC_Stop(&hadc1);
 8000662:	4806      	ldr	r0, [pc, #24]	@ (800067c <main+0xfc>)
 8000664:	f001 f930 	bl	80018c8 <HAL_ADC_Stop>

    // A short delay is crucial. It controls your sampling rate.
    // A 10ms delay gives you a sampling rate of 100 Hz (100 samples/sec).
    HAL_Delay(2);
 8000668:	2002      	movs	r0, #2
 800066a:	f000 fd53 	bl	8001114 <HAL_Delay>
  {
 800066e:	e7ce      	b.n	800060e <main+0x8e>
 8000670:	200000ac 	.word	0x200000ac
 8000674:	08005f2c 	.word	0x08005f2c
 8000678:	20000008 	.word	0x20000008
 800067c:	200000bc 	.word	0x200000bc
 8000680:	08005f48 	.word	0x08005f48

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b09a      	sub	sp, #104	@ 0x68
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	2248      	movs	r2, #72	@ 0x48
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f004 fe27 	bl	80052e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]
 80006a6:	615a      	str	r2, [r3, #20]
 80006a8:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80006aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80006b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80006b8:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80006ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	f023 0303 	bic.w	r3, r3, #3
 80006c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	60d3      	str	r3, [r2, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ce:	4b21      	ldr	r3, [pc, #132]	@ (8000754 <SystemClock_Config+0xd0>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80006d6:	4a1f      	ldr	r2, [pc, #124]	@ (8000754 <SystemClock_Config+0xd0>)
 80006d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006dc:	6013      	str	r3, [r2, #0]
 80006de:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <SystemClock_Config+0xd0>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80006ea:	2322      	movs	r3, #34	@ 0x22
 80006ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	2340      	movs	r3, #64	@ 0x40
 80006fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006fc:	2300      	movs	r3, #0
 80006fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000700:	2360      	movs	r3, #96	@ 0x60
 8000702:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000704:	2300      	movs	r3, #0
 8000706:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4618      	mov	r0, r3
 800070e:	f002 fd4b 	bl	80031a8 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000718:	f000 f8e2 	bl	80008e0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800071c:	236f      	movs	r3, #111	@ 0x6f
 800071e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000730:	2380      	movs	r3, #128	@ 0x80
 8000732:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f003 f8a7 	bl	8003890 <HAL_RCC_ClockConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000748:	f000 f8ca 	bl	80008e0 <Error_Handler>
  }
}
 800074c:	bf00      	nop
 800074e:	3768      	adds	r7, #104	@ 0x68
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	58000400 	.word	0x58000400

08000758 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b094      	sub	sp, #80	@ 0x50
 800075c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800075e:	463b      	mov	r3, r7
 8000760:	2250      	movs	r2, #80	@ 0x50
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f004 fdbe 	bl	80052e6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800076a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800076e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000770:	2300      	movs	r3, #0
 8000772:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000774:	2300      	movs	r3, #0
 8000776:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	4618      	mov	r0, r3
 800077c:	f003 fcc5 	bl	800410a <HAL_RCCEx_PeriphCLKConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000786:	f000 f8ab 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	@ 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800079a:	463b      	mov	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
 80007a8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007aa:	4b29      	ldr	r3, [pc, #164]	@ (8000850 <MX_ADC1_Init+0xbc>)
 80007ac:	4a29      	ldr	r2, [pc, #164]	@ (8000854 <MX_ADC1_Init+0xc0>)
 80007ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007b0:	4b27      	ldr	r3, [pc, #156]	@ (8000850 <MX_ADC1_Init+0xbc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b6:	4b26      	ldr	r3, [pc, #152]	@ (8000850 <MX_ADC1_Init+0xbc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007bc:	4b24      	ldr	r3, [pc, #144]	@ (8000850 <MX_ADC1_Init+0xbc>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007c2:	4b23      	ldr	r3, [pc, #140]	@ (8000850 <MX_ADC1_Init+0xbc>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c8:	4b21      	ldr	r3, [pc, #132]	@ (8000850 <MX_ADC1_Init+0xbc>)
 80007ca:	2204      	movs	r2, #4
 80007cc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ce:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <MX_ADC1_Init+0xbc>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000850 <MX_ADC1_Init+0xbc>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007da:	4b1d      	ldr	r3, [pc, #116]	@ (8000850 <MX_ADC1_Init+0xbc>)
 80007dc:	2201      	movs	r2, #1
 80007de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000850 <MX_ADC1_Init+0xbc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e8:	4b19      	ldr	r3, [pc, #100]	@ (8000850 <MX_ADC1_Init+0xbc>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ee:	4b18      	ldr	r3, [pc, #96]	@ (8000850 <MX_ADC1_Init+0xbc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007f4:	4b16      	ldr	r3, [pc, #88]	@ (8000850 <MX_ADC1_Init+0xbc>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007fc:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <MX_ADC1_Init+0xbc>)
 80007fe:	2200      	movs	r2, #0
 8000800:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000802:	4b13      	ldr	r3, [pc, #76]	@ (8000850 <MX_ADC1_Init+0xbc>)
 8000804:	2200      	movs	r2, #0
 8000806:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800080a:	4811      	ldr	r0, [pc, #68]	@ (8000850 <MX_ADC1_Init+0xbc>)
 800080c:	f000 febc 	bl	8001588 <HAL_ADC_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000816:	f000 f863 	bl	80008e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800081a:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_ADC1_Init+0xc4>)
 800081c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800081e:	2306      	movs	r3, #6
 8000820:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000826:	237f      	movs	r3, #127	@ 0x7f
 8000828:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800082a:	2304      	movs	r3, #4
 800082c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000832:	463b      	mov	r3, r7
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	@ (8000850 <MX_ADC1_Init+0xbc>)
 8000838:	f001 f914 	bl	8001a64 <HAL_ADC_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000842:	f000 f84d 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000bc 	.word	0x200000bc
 8000854:	50040000 	.word	0x50040000
 8000858:	10c00010 	.word	0x10c00010

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000870:	2004      	movs	r0, #4
 8000872:	f7ff fe6b 	bl	800054c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2001      	movs	r0, #1
 8000878:	f7ff fe68 	bl	800054c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087c:	2002      	movs	r0, #2
 800087e:	f7ff fe65 	bl	800054c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	2101      	movs	r1, #1
 8000886:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800088a:	f002 f8c7 	bl	8002a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2102      	movs	r1, #2
 8000892:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000896:	f002 f8c1 	bl	8002a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800089a:	2303      	movs	r3, #3
 800089c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	4619      	mov	r1, r3
 80008ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b2:	f001 ff43 	bl	800273c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 80008b6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80008c8:	230a      	movs	r3, #10
 80008ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	4619      	mov	r1, r3
 80008d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d4:	f001 ff32 	bl	800273c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008d8:	bf00      	nop
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <Error_Handler+0x8>

080008ec <LL_AHB2_GRP1_EnableClock>:
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4313      	orrs	r3, r2
 8000902:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000908:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4013      	ands	r3, r2
 800090e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000910:	68fb      	ldr	r3, [r7, #12]
}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b09c      	sub	sp, #112	@ 0x70
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2250      	movs	r2, #80	@ 0x50
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f004 fcca 	bl	80052e6 <memset>
  if(hadc->Instance==ADC1)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a1c      	ldr	r2, [pc, #112]	@ (80009c8 <HAL_ADC_MspInit+0x9c>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d130      	bne.n	80009be <HAL_ADC_MspInit+0x92>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800095c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000960:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000962:	2318      	movs	r3, #24
 8000964:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000966:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800096a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800096c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000970:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000972:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000976:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8000978:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800097c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800097e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000982:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	4618      	mov	r0, r3
 800098a:	f003 fbbe 	bl	800410a <HAL_RCCEx_PeriphCLKConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 8000994:	f7ff ffa4 	bl	80008e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000998:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800099c:	f7ff ffa6 	bl	80008ec <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a0:	2004      	movs	r0, #4
 80009a2:	f7ff ffa3 	bl	80008ec <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009a6:	2308      	movs	r3, #8
 80009a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009aa:	2303      	movs	r3, #3
 80009ac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80009b6:	4619      	mov	r1, r3
 80009b8:	4804      	ldr	r0, [pc, #16]	@ (80009cc <HAL_ADC_MspInit+0xa0>)
 80009ba:	f001 febf 	bl	800273c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80009be:	bf00      	nop
 80009c0:	3770      	adds	r7, #112	@ 0x70
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	50040000 	.word	0x50040000
 80009cc:	48000800 	.word	0x48000800

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <NMI_Handler+0x4>

080009d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <HardFault_Handler+0x4>

080009e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <MemManage_Handler+0x4>

080009e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a26:	f000 fb49 	bl	80010bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b086      	sub	sp, #24
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	60f8      	str	r0, [r7, #12]
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	e00a      	b.n	8000a56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a40:	f3af 8000 	nop.w
 8000a44:	4601      	mov	r1, r0
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	1c5a      	adds	r2, r3, #1
 8000a4a:	60ba      	str	r2, [r7, #8]
 8000a4c:	b2ca      	uxtb	r2, r1
 8000a4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	3301      	adds	r3, #1
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	697a      	ldr	r2, [r7, #20]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	dbf0      	blt.n	8000a40 <_read+0x12>
  }

  return len;
 8000a5e:	687b      	ldr	r3, [r7, #4]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3718      	adds	r7, #24
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	e009      	b.n	8000a8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	1c5a      	adds	r2, r3, #1
 8000a7e:	60ba      	str	r2, [r7, #8]
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 fa74 	bl	8000f70 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	697a      	ldr	r2, [r7, #20]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	dbf1      	blt.n	8000a7a <_write+0x12>
  }
  return len;
 8000a96:	687b      	ldr	r3, [r7, #4]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3718      	adds	r7, #24
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <_close>:

int _close(int file)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ac8:	605a      	str	r2, [r3, #4]
  return 0;
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <_isatty>:

int _isatty(int file)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ae0:	2301      	movs	r3, #1
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b085      	sub	sp, #20
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	60f8      	str	r0, [r7, #12]
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b10:	4a14      	ldr	r2, [pc, #80]	@ (8000b64 <_sbrk+0x5c>)
 8000b12:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <_sbrk+0x60>)
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b1c:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b24:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <_sbrk+0x64>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	@ (8000b70 <_sbrk+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d207      	bcs.n	8000b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b38:	f004 fc24 	bl	8005384 <__errno>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	220c      	movs	r2, #12
 8000b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b46:	e009      	b.n	8000b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b48:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	@ (8000b6c <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	4a05      	ldr	r2, [pc, #20]	@ (8000b6c <_sbrk+0x64>)
 8000b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20030000 	.word	0x20030000
 8000b68:	00000400 	.word	0x00000400
 8000b6c:	20000120 	.word	0x20000120
 8000b70:	20000310 	.word	0x20000310

08000b74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000b78:	4b24      	ldr	r3, [pc, #144]	@ (8000c0c <SystemInit+0x98>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b7e:	4a23      	ldr	r2, [pc, #140]	@ (8000c0c <SystemInit+0x98>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000b98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b9c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000ba0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000ba2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bac:	4b18      	ldr	r3, [pc, #96]	@ (8000c10 <SystemInit+0x9c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000bb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000bba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000bbe:	f023 0305 	bic.w	r3, r3, #5
 8000bc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000bce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000bd2:	f023 0301 	bic.w	r3, r3, #1
 8000bd6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000bda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bde:	4a0d      	ldr	r2, [pc, #52]	@ (8000c14 <SystemInit+0xa0>)
 8000be0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000be6:	4a0b      	ldr	r2, [pc, #44]	@ (8000c14 <SystemInit+0xa0>)
 8000be8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000bf4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bf8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00
 8000c10:	faf6fefb 	.word	0xfaf6fefb
 8000c14:	22041000 	.word	0x22041000

08000c18 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000c18:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1c:	3304      	adds	r3, #4

08000c1e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c1e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c20:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000c22:	d3f9      	bcc.n	8000c18 <CopyDataInit>
  bx lr
 8000c24:	4770      	bx	lr

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000c26:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000c28:	3004      	adds	r0, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000c2a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>
  bx lr
 8000c2e:	4770      	bx	lr

08000c30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c30:	480c      	ldr	r0, [pc, #48]	@ (8000c64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c32:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c34:	f7ff ff9e 	bl	8000b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000c38:	480b      	ldr	r0, [pc, #44]	@ (8000c68 <LoopForever+0x6>)
 8000c3a:	490c      	ldr	r1, [pc, #48]	@ (8000c6c <LoopForever+0xa>)
 8000c3c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c70 <LoopForever+0xe>)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f7ff ffed 	bl	8000c1e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000c44:	480b      	ldr	r0, [pc, #44]	@ (8000c74 <LoopForever+0x12>)
 8000c46:	490c      	ldr	r1, [pc, #48]	@ (8000c78 <LoopForever+0x16>)
 8000c48:	4a0c      	ldr	r2, [pc, #48]	@ (8000c7c <LoopForever+0x1a>)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f7ff ffe7 	bl	8000c1e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000c50:	480b      	ldr	r0, [pc, #44]	@ (8000c80 <LoopForever+0x1e>)
 8000c52:	490c      	ldr	r1, [pc, #48]	@ (8000c84 <LoopForever+0x22>)
 8000c54:	2300      	movs	r3, #0
 8000c56:	f7ff ffe8 	bl	8000c2a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c5a:	f004 fb99 	bl	8005390 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c5e:	f7ff fc8f 	bl	8000580 <main>

08000c62 <LoopForever>:

LoopForever:
  b LoopForever
 8000c62:	e7fe      	b.n	8000c62 <LoopForever>
  ldr   r0, =_estack
 8000c64:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000090 	.word	0x20000090
 8000c70:	0800608c 	.word	0x0800608c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000c74:	20030000 	.word	0x20030000
 8000c78:	20030000 	.word	0x20030000
 8000c7c:	08006114 	.word	0x08006114
  INIT_BSS _sbss, _ebss
 8000c80:	20000090 	.word	0x20000090
 8000c84:	2000030c 	.word	0x2000030c

08000c88 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC1_IRQHandler>

08000c8a <LL_AHB2_GRP1_EnableClock>:
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b085      	sub	sp, #20
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ca2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ca6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4013      	ands	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cae:	68fb      	ldr	r3, [r7, #12]
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cc8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000cca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000cd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cd8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
}
 8000ce2:	bf00      	nop
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000d0a:	2002      	movs	r0, #2
 8000d0c:	f7ff ffbd 	bl	8000c8a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	4a12      	ldr	r2, [pc, #72]	@ (8000d5c <BSP_LED_Init+0x6c>)
 8000d14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d18:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	4a0d      	ldr	r2, [pc, #52]	@ (8000d60 <BSP_LED_Init+0x70>)
 8000d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2e:	f107 020c 	add.w	r2, r7, #12
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f001 fd01 	bl	800273c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	4a08      	ldr	r2, [pc, #32]	@ (8000d60 <BSP_LED_Init+0x70>)
 8000d3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	4a05      	ldr	r2, [pc, #20]	@ (8000d5c <BSP_LED_Init+0x6c>)
 8000d46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f001 fe65 	bl	8002a1c <HAL_GPIO_WritePin>
}
 8000d52:	bf00      	nop
 8000d54:	3720      	adds	r7, #32
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	0800601c 	.word	0x0800601c
 8000d60:	20000010 	.word	0x20000010

08000d64 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	4a07      	ldr	r2, [pc, #28]	@ (8000d90 <BSP_LED_On+0x2c>)
 8000d72:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	4a06      	ldr	r2, [pc, #24]	@ (8000d94 <BSP_LED_On+0x30>)
 8000d7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4619      	mov	r1, r3
 8000d82:	f001 fe4b 	bl	8002a1c <HAL_GPIO_WritePin>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000010 	.word	0x20000010
 8000d94:	0800601c 	.word	0x0800601c

08000d98 <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	4a07      	ldr	r2, [pc, #28]	@ (8000dc4 <BSP_LED_Toggle+0x2c>)
 8000da6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	4906      	ldr	r1, [pc, #24]	@ (8000dc8 <BSP_LED_Toggle+0x30>)
 8000dae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000db2:	4619      	mov	r1, r3
 8000db4:	4610      	mov	r0, r2
 8000db6:	f001 fe49 	bl	8002a4c <HAL_GPIO_TogglePin>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000010 	.word	0x20000010
 8000dc8:	0800601c 	.word	0x0800601c

08000dcc <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	460a      	mov	r2, r1
 8000dd6:	71fb      	strb	r3, [r7, #7]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d103      	bne.n	8000dfa <BSP_PB_Init+0x2e>
 8000df2:	2004      	movs	r0, #4
 8000df4:	f7ff ff49 	bl	8000c8a <LL_AHB2_GRP1_EnableClock>
 8000df8:	e00c      	b.n	8000e14 <BSP_PB_Init+0x48>
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d103      	bne.n	8000e08 <BSP_PB_Init+0x3c>
 8000e00:	2008      	movs	r0, #8
 8000e02:	f7ff ff42 	bl	8000c8a <LL_AHB2_GRP1_EnableClock>
 8000e06:	e005      	b.n	8000e14 <BSP_PB_Init+0x48>
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d102      	bne.n	8000e14 <BSP_PB_Init+0x48>
 8000e0e:	2008      	movs	r0, #8
 8000e10:	f7ff ff3b 	bl	8000c8a <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000e14:	79bb      	ldrb	r3, [r7, #6]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d117      	bne.n	8000e4a <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	4a20      	ldr	r2, [pc, #128]	@ (8000ea0 <BSP_PB_Init+0xd4>)
 8000e1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e22:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8000e24:	2300      	movs	r3, #0
 8000e26:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea4 <BSP_PB_Init+0xd8>)
 8000e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e38:	f107 020c 	add.w	r2, r7, #12
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 fc7c 	bl	800273c <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8000e44:	2001      	movs	r0, #1
 8000e46:	f000 f965 	bl	8001114 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000e4a:	79bb      	ldrb	r3, [r7, #6]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d123      	bne.n	8000e98 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	4a13      	ldr	r2, [pc, #76]	@ (8000ea0 <BSP_PB_Init+0xd4>)
 8000e54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e58:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8000e5e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e62:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea4 <BSP_PB_Init+0xd8>)
 8000e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6c:	f107 020c 	add.w	r2, r7, #12
 8000e70:	4611      	mov	r1, r2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f001 fc62 	bl	800273c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea8 <BSP_PB_Init+0xdc>)
 8000e7c:	5cd3      	ldrb	r3, [r2, r3]
 8000e7e:	b25b      	sxtb	r3, r3
 8000e80:	2200      	movs	r2, #0
 8000e82:	210f      	movs	r1, #15
 8000e84:	4618      	mov	r0, r3
 8000e86:	f001 fc24 	bl	80026d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	4a06      	ldr	r2, [pc, #24]	@ (8000ea8 <BSP_PB_Init+0xdc>)
 8000e8e:	5cd3      	ldrb	r3, [r2, r3]
 8000e90:	b25b      	sxtb	r3, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f001 fc37 	bl	8002706 <HAL_NVIC_EnableIRQ>
  }
}
 8000e98:	bf00      	nop
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	08006024 	.word	0x08006024
 8000ea4:	2000001c 	.word	0x2000001c
 8000ea8:	0800602c 	.word	0x0800602c

08000eac <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d903      	bls.n	8000eca <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000ec2:	f06f 0301 	mvn.w	r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	e018      	b.n	8000efc <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2294      	movs	r2, #148	@ 0x94
 8000ece:	fb02 f303 	mul.w	r3, r2, r3
 8000ed2:	4a0d      	ldr	r2, [pc, #52]	@ (8000f08 <BSP_COM_Init+0x5c>)
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f866 	bl	8000fa8 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	2294      	movs	r2, #148	@ 0x94
 8000ee0:	fb02 f303 	mul.w	r3, r2, r3
 8000ee4:	4a08      	ldr	r2, [pc, #32]	@ (8000f08 <BSP_COM_Init+0x5c>)
 8000ee6:	4413      	add	r3, r2
 8000ee8:	6839      	ldr	r1, [r7, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f80e 	bl	8000f0c <MX_LPUART1_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d002      	beq.n	8000efc <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000ef6:	f06f 0303 	mvn.w	r3, #3
 8000efa:	e000      	b.n	8000efe <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000efc:	68fb      	ldr	r3, [r7, #12]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000124 	.word	0x20000124

08000f0c <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000f16:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <MX_LPUART1_Init+0x60>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	220c      	movs	r2, #12
 8000f2a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	895b      	ldrh	r3, [r3, #10]
 8000f30:	461a      	mov	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	891b      	ldrh	r3, [r3, #8]
 8000f42:	461a      	mov	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	899b      	ldrh	r3, [r3, #12]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f58:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f003 fb7c 	bl	8004658 <HAL_UART_Init>
 8000f60:	4603      	mov	r3, r0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000028 	.word	0x20000028

08000f70 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8000f78:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <__io_putchar+0x30>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	2394      	movs	r3, #148	@ 0x94
 8000f80:	fb02 f303 	mul.w	r3, r2, r3
 8000f84:	4a07      	ldr	r2, [pc, #28]	@ (8000fa4 <__io_putchar+0x34>)
 8000f86:	1898      	adds	r0, r3, r2
 8000f88:	1d39      	adds	r1, r7, #4
 8000f8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f003 fbbc 	bl	800470c <HAL_UART_Transmit>
  return ch;
 8000f94:	687b      	ldr	r3, [r7, #4]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200001b8 	.word	0x200001b8
 8000fa4:	20000124 	.word	0x20000124

08000fa8 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000fb0:	2002      	movs	r0, #2
 8000fb2:	f7ff fe6a 	bl	8000c8a <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8000fb6:	2002      	movs	r0, #2
 8000fb8:	f7ff fe67 	bl	8000c8a <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000fbc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000fc0:	f7ff fe7c 	bl	8000cbc <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000fc4:	2340      	movs	r3, #64	@ 0x40
 8000fc6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000fd4:	2307      	movs	r3, #7
 8000fd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4809      	ldr	r0, [pc, #36]	@ (8001004 <COM1_MspInit+0x5c>)
 8000fe0:	f001 fbac 	bl	800273c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000fe4:	2380      	movs	r3, #128	@ 0x80
 8000fe6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000fec:	2307      	movs	r3, #7
 8000fee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4803      	ldr	r0, [pc, #12]	@ (8001004 <COM1_MspInit+0x5c>)
 8000ff8:	f001 fba0 	bl	800273c <HAL_GPIO_Init>
}
 8000ffc:	bf00      	nop
 8000ffe:	3720      	adds	r7, #32
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	48000400 	.word	0x48000400

08001008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001012:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <HAL_Init+0x3c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a0b      	ldr	r2, [pc, #44]	@ (8001044 <HAL_Init+0x3c>)
 8001018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800101c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101e:	2003      	movs	r0, #3
 8001020:	f001 fb4c 	bl	80026bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001024:	2000      	movs	r0, #0
 8001026:	f000 f80f 	bl	8001048 <HAL_InitTick>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	71fb      	strb	r3, [r7, #7]
 8001034:	e001      	b.n	800103a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001036:	f7ff fc72 	bl	800091e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800103a:	79fb      	ldrb	r3, [r7, #7]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	58004000 	.word	0x58004000

08001048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001054:	4b17      	ldr	r3, [pc, #92]	@ (80010b4 <HAL_InitTick+0x6c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d024      	beq.n	80010a6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800105c:	f002 fdc4 	bl	8003be8 <HAL_RCC_GetHCLKFreq>
 8001060:	4602      	mov	r2, r0
 8001062:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <HAL_InitTick+0x6c>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	4619      	mov	r1, r3
 8001068:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800106c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001070:	fbb2 f3f3 	udiv	r3, r2, r3
 8001074:	4618      	mov	r0, r3
 8001076:	f001 fb54 	bl	8002722 <HAL_SYSTICK_Config>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d10f      	bne.n	80010a0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b0f      	cmp	r3, #15
 8001084:	d809      	bhi.n	800109a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001086:	2200      	movs	r2, #0
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800108e:	f001 fb20 	bl	80026d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001092:	4a09      	ldr	r2, [pc, #36]	@ (80010b8 <HAL_InitTick+0x70>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	e007      	b.n	80010aa <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	73fb      	strb	r3, [r7, #15]
 800109e:	e004      	b.n	80010aa <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	e001      	b.n	80010aa <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000030 	.word	0x20000030
 80010b8:	2000002c 	.word	0x2000002c

080010bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <HAL_IncTick+0x20>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_IncTick+0x24>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a04      	ldr	r2, [pc, #16]	@ (80010e0 <HAL_IncTick+0x24>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000030 	.word	0x20000030
 80010e0:	200001bc 	.word	0x200001bc

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b03      	ldr	r3, [pc, #12]	@ (80010f8 <HAL_GetTick+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	200001bc 	.word	0x200001bc

080010fc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001100:	4b03      	ldr	r3, [pc, #12]	@ (8001110 <HAL_GetTickPrio+0x14>)
 8001102:	681b      	ldr	r3, [r3, #0]
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	2000002c 	.word	0x2000002c

08001114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800111c:	f7ff ffe2 	bl	80010e4 <HAL_GetTick>
 8001120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800112c:	d005      	beq.n	800113a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800112e:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <HAL_Delay+0x44>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800113a:	bf00      	nop
 800113c:	f7ff ffd2 	bl	80010e4 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	429a      	cmp	r2, r3
 800114a:	d8f7      	bhi.n	800113c <HAL_Delay+0x28>
  {
  }
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000030 	.word	0x20000030

0800115c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	431a      	orrs	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	431a      	orrs	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	609a      	str	r2, [r3, #8]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b087      	sub	sp, #28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3360      	adds	r3, #96	@ 0x60
 80011d6:	461a      	mov	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b08      	ldr	r3, [pc, #32]	@ (8001208 <LL_ADC_SetOffset+0x44>)
 80011e6:	4013      	ands	r3, r2
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	4313      	orrs	r3, r2
 80011f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011fc:	bf00      	nop
 80011fe:	371c      	adds	r7, #28
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	03fff000 	.word	0x03fff000

0800120c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3360      	adds	r3, #96	@ 0x60
 800121a:	461a      	mov	r2, r3
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800122c:	4618      	mov	r0, r3
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001238:	b480      	push	{r7}
 800123a:	b087      	sub	sp, #28
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	3360      	adds	r3, #96	@ 0x60
 8001248:	461a      	mov	r2, r3
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	431a      	orrs	r2, r3
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001262:	bf00      	nop
 8001264:	371c      	adds	r7, #28
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001286:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	3330      	adds	r3, #48	@ 0x30
 80012a4:	461a      	mov	r2, r3
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	f003 030c 	and.w	r3, r3, #12
 80012b0:	4413      	add	r3, r2
 80012b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	f003 031f 	and.w	r3, r3, #31
 80012be:	211f      	movs	r1, #31
 80012c0:	fa01 f303 	lsl.w	r3, r1, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	401a      	ands	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	0e9b      	lsrs	r3, r3, #26
 80012cc:	f003 011f 	and.w	r1, r3, #31
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	f003 031f 	and.w	r3, r3, #31
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	431a      	orrs	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80012e0:	bf00      	nop
 80012e2:	371c      	adds	r7, #28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b087      	sub	sp, #28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	3314      	adds	r3, #20
 80012fc:	461a      	mov	r2, r3
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	0e5b      	lsrs	r3, r3, #25
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	4413      	add	r3, r2
 800130a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	0d1b      	lsrs	r3, r3, #20
 8001314:	f003 031f 	and.w	r3, r3, #31
 8001318:	2107      	movs	r1, #7
 800131a:	fa01 f303 	lsl.w	r3, r1, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	401a      	ands	r2, r3
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	0d1b      	lsrs	r3, r3, #20
 8001326:	f003 031f 	and.w	r3, r3, #31
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	fa01 f303 	lsl.w	r3, r1, r3
 8001330:	431a      	orrs	r2, r3
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001336:	bf00      	nop
 8001338:	371c      	adds	r7, #28
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800135c:	43db      	mvns	r3, r3
 800135e:	401a      	ands	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f003 0318 	and.w	r3, r3, #24
 8001366:	4908      	ldr	r1, [pc, #32]	@ (8001388 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001368:	40d9      	lsrs	r1, r3
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	400b      	ands	r3, r1
 800136e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001372:	431a      	orrs	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800137a:	bf00      	nop
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	0007ffff 	.word	0x0007ffff

0800138c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800139c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	6093      	str	r3, [r2, #8]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80013c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013c4:	d101      	bne.n	80013ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80013e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001410:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001414:	d101      	bne.n	800141a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001438:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800143c:	f043 0201 	orr.w	r2, r3, #1
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001460:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001464:	f043 0202 	orr.w	r2, r3, #2
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b01      	cmp	r3, #1
 800148a:	d101      	bne.n	8001490 <LL_ADC_IsEnabled+0x18>
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <LL_ADC_IsEnabled+0x1a>
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d101      	bne.n	80014b6 <LL_ADC_IsDisableOngoing+0x18>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <LL_ADC_IsDisableOngoing+0x1a>
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014d8:	f043 0204 	orr.w	r2, r3, #4
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001500:	f043 0210 	orr.w	r2, r3, #16
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b04      	cmp	r3, #4
 8001526:	d101      	bne.n	800152c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001528:	2301      	movs	r3, #1
 800152a:	e000      	b.n	800152e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800154a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800154e:	f043 0220 	orr.w	r2, r3, #32
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b08      	cmp	r3, #8
 8001574:	d101      	bne.n	800157a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001576:	2301      	movs	r3, #1
 8001578:	e000      	b.n	800157c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001594:	2300      	movs	r3, #0
 8001596:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e12e      	b.n	8001804 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d109      	bne.n	80015c8 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff f9b9 	bl	800092c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff feef 	bl	80013b0 <LL_ADC_IsDeepPowerDownEnabled>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d004      	beq.n	80015e2 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fed5 	bl	800138c <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ff0a 	bl	8001400 <LL_ADC_IsInternalRegulatorEnabled>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d115      	bne.n	800161e <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff feee 	bl	80013d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015fc:	4b83      	ldr	r3, [pc, #524]	@ (800180c <HAL_ADC_Init+0x284>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	099b      	lsrs	r3, r3, #6
 8001602:	4a83      	ldr	r2, [pc, #524]	@ (8001810 <HAL_ADC_Init+0x288>)
 8001604:	fba2 2303 	umull	r2, r3, r2, r3
 8001608:	099b      	lsrs	r3, r3, #6
 800160a:	3301      	adds	r3, #1
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001610:	e002      	b.n	8001618 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	3b01      	subs	r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f9      	bne.n	8001612 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff feec 	bl	8001400 <LL_ADC_IsInternalRegulatorEnabled>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10d      	bne.n	800164a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001632:	f043 0210 	orr.w	r2, r3, #16
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163e:	f043 0201 	orr.w	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ff60 	bl	8001514 <LL_ADC_REG_IsConversionOngoing>
 8001654:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	2b00      	cmp	r3, #0
 8001660:	f040 80c7 	bne.w	80017f2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	2b00      	cmp	r3, #0
 8001668:	f040 80c3 	bne.w	80017f2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001670:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001674:	f043 0202 	orr.w	r2, r3, #2
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fef9 	bl	8001478 <LL_ADC_IsEnabled>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10b      	bne.n	80016a4 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800168c:	4861      	ldr	r0, [pc, #388]	@ (8001814 <HAL_ADC_Init+0x28c>)
 800168e:	f7ff fef3 	bl	8001478 <LL_ADC_IsEnabled>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d105      	bne.n	80016a4 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	4619      	mov	r1, r3
 800169e:	485e      	ldr	r0, [pc, #376]	@ (8001818 <HAL_ADC_Init+0x290>)
 80016a0:	f7ff fd5c 	bl	800115c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7e5b      	ldrb	r3, [r3, #25]
 80016a8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016ae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80016b4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80016ba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c2:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80016c4:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d106      	bne.n	80016e4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016da:	3b01      	subs	r3, #1
 80016dc:	045b      	lsls	r3, r3, #17
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d009      	beq.n	8001700 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	4b45      	ldr	r3, [pc, #276]	@ (800181c <HAL_ADC_Init+0x294>)
 8001708:	4013      	ands	r3, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	69b9      	ldr	r1, [r7, #24]
 8001710:	430b      	orrs	r3, r1
 8001712:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fefb 	bl	8001514 <LL_ADC_REG_IsConversionOngoing>
 800171e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff1c 	bl	8001562 <LL_ADC_INJ_IsConversionOngoing>
 800172a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d13d      	bne.n	80017ae <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d13a      	bne.n	80017ae <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800173c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001744:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001754:	f023 0302 	bic.w	r3, r3, #2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	69b9      	ldr	r1, [r7, #24]
 800175e:	430b      	orrs	r3, r1
 8001760:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001768:	2b01      	cmp	r3, #1
 800176a:	d118      	bne.n	800179e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001776:	f023 0304 	bic.w	r3, r3, #4
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001782:	4311      	orrs	r1, r2
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001788:	4311      	orrs	r1, r2
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800178e:	430a      	orrs	r2, r1
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0201 	orr.w	r2, r2, #1
 800179a:	611a      	str	r2, [r3, #16]
 800179c:	e007      	b.n	80017ae <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	691a      	ldr	r2, [r3, #16]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0201 	bic.w	r2, r2, #1
 80017ac:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d10c      	bne.n	80017d0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017bc:	f023 010f 	bic.w	r1, r3, #15
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	1e5a      	subs	r2, r3, #1
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80017ce:	e007      	b.n	80017e0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 020f 	bic.w	r2, r2, #15
 80017de:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017e4:	f023 0303 	bic.w	r3, r3, #3
 80017e8:	f043 0201 	orr.w	r2, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80017f0:	e007      	b.n	8001802 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017f6:	f043 0210 	orr.w	r2, r3, #16
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001802:	7ffb      	ldrb	r3, [r7, #31]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3720      	adds	r7, #32
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	2000000c 	.word	0x2000000c
 8001810:	053e2d63 	.word	0x053e2d63
 8001814:	50040000 	.word	0x50040000
 8001818:	50040300 	.word	0x50040300
 800181c:	fff0c007 	.word	0xfff0c007

08001820 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fe71 	bl	8001514 <LL_ADC_REG_IsConversionOngoing>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d140      	bne.n	80018ba <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800183e:	2b01      	cmp	r3, #1
 8001840:	d101      	bne.n	8001846 <HAL_ADC_Start+0x26>
 8001842:	2302      	movs	r3, #2
 8001844:	e03c      	b.n	80018c0 <HAL_ADC_Start+0xa0>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 fd8a 	bl	8002368 <ADC_Enable>
 8001854:	4603      	mov	r3, r0
 8001856:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d128      	bne.n	80018b0 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001862:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001876:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800187a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800187e:	d106      	bne.n	800188e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001884:	f023 0206 	bic.w	r2, r3, #6
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	659a      	str	r2, [r3, #88]	@ 0x58
 800188c:	e002      	b.n	8001894 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	221c      	movs	r2, #28
 800189a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fe0b 	bl	80014c4 <LL_ADC_REG_StartConversion>
 80018ae:	e006      	b.n	80018be <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80018b8:	e001      	b.n	80018be <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018ba:	2302      	movs	r3, #2
 80018bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80018be:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d101      	bne.n	80018de <HAL_ADC_Stop+0x16>
 80018da:	2302      	movs	r3, #2
 80018dc:	e023      	b.n	8001926 <HAL_ADC_Stop+0x5e>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80018e6:	2103      	movs	r1, #3
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 fc81 	bl	80021f0 <ADC_ConversionStop>
 80018ee:	4603      	mov	r3, r0
 80018f0:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d111      	bne.n	800191c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 fdaf 	bl	800245c <ADC_Disable>
 80018fe:	4603      	mov	r3, r0
 8001900:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d109      	bne.n	800191c <HAL_ADC_Stop+0x54>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800190c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001910:	f023 0301 	bic.w	r3, r3, #1
 8001914:	f043 0201 	orr.w	r2, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	655a      	str	r2, [r3, #84]	@ 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001924:	7bfb      	ldrb	r3, [r7, #15]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b084      	sub	sp, #16
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	2b08      	cmp	r3, #8
 800193e:	d102      	bne.n	8001946 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001940:	2308      	movs	r3, #8
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	e010      	b.n	8001968 <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d007      	beq.n	8001964 <HAL_ADC_PollForConversion+0x36>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001958:	f043 0220 	orr.w	r2, r3, #32
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	655a      	str	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e06d      	b.n	8001a40 <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001964:	2304      	movs	r3, #4
 8001966:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001968:	f7ff fbbc 	bl	80010e4 <HAL_GetTick>
 800196c:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800196e:	e021      	b.n	80019b4 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001976:	d01d      	beq.n	80019b4 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001978:	f7ff fbb4 	bl	80010e4 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d302      	bcc.n	800198e <HAL_ADC_PollForConversion+0x60>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d112      	bne.n	80019b4 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4013      	ands	r3, r2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10b      	bne.n	80019b4 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019a0:	f043 0204 	orr.w	r2, r3, #4
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e045      	b.n	8001a40 <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4013      	ands	r3, r2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0d6      	beq.n	8001970 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fc4b 	bl	800126e <LL_ADC_REG_IsTriggerSourceSWStart>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d01c      	beq.n	8001a18 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	7e5b      	ldrb	r3, [r3, #25]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d118      	bne.n	8001a18 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d111      	bne.n	8001a18 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d105      	bne.n	8001a18 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a10:	f043 0201 	orr.w	r2, r3, #1
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d104      	bne.n	8001a28 <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2208      	movs	r2, #8
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	e00a      	b.n	8001a3e <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d103      	bne.n	8001a3e <HAL_ADC_PollForConversion+0x110>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b0b6      	sub	sp, #216	@ 0xd8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d101      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x22>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e39f      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x762>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fd3e 	bl	8001514 <LL_ADC_REG_IsConversionOngoing>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 8384 	bne.w	80021a8 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	6859      	ldr	r1, [r3, #4]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	f7ff fbf1 	bl	8001294 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fd2c 	bl	8001514 <LL_ADC_REG_IsConversionOngoing>
 8001abc:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fd4c 	bl	8001562 <LL_ADC_INJ_IsConversionOngoing>
 8001aca:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ace:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f040 81a6 	bne.w	8001e24 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ad8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f040 81a1 	bne.w	8001e24 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	6819      	ldr	r1, [r3, #0]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	461a      	mov	r2, r3
 8001af0:	f7ff fbfc 	bl	80012ec <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	695a      	ldr	r2, [r3, #20]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	08db      	lsrs	r3, r3, #3
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d00a      	beq.n	8001b2c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	6919      	ldr	r1, [r3, #16]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001b26:	f7ff fb4d 	bl	80011c4 <LL_ADC_SetOffset>
 8001b2a:	e17b      	b.n	8001e24 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fb6a 	bl	800120c <LL_ADC_GetOffsetChannel>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10a      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0xf4>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2100      	movs	r1, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fb5f 	bl	800120c <LL_ADC_GetOffsetChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	0e9b      	lsrs	r3, r3, #26
 8001b52:	f003 021f 	and.w	r2, r3, #31
 8001b56:	e01e      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x132>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fb54 	bl	800120c <LL_ADC_GetOffsetChannel>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b6e:	fa93 f3a3 	rbit	r3, r3
 8001b72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b7a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8001b86:	2320      	movs	r3, #32
 8001b88:	e004      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8001b8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b8e:	fab3 f383 	clz	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	461a      	mov	r2, r3
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d105      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x14a>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	0e9b      	lsrs	r3, r3, #26
 8001ba8:	f003 031f 	and.w	r3, r3, #31
 8001bac:	e018      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x17c>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001bba:	fa93 f3a3 	rbit	r3, r3
 8001bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001bc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001bca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8001bd2:	2320      	movs	r3, #32
 8001bd4:	e004      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8001bd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d106      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2200      	movs	r2, #0
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fb23 	bl	8001238 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fb07 	bl	800120c <LL_ADC_GetOffsetChannel>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10a      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x1ba>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fafc 	bl	800120c <LL_ADC_GetOffsetChannel>
 8001c14:	4603      	mov	r3, r0
 8001c16:	0e9b      	lsrs	r3, r3, #26
 8001c18:	f003 021f 	and.w	r2, r3, #31
 8001c1c:	e01e      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x1f8>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2101      	movs	r1, #1
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff faf1 	bl	800120c <LL_ADC_GetOffsetChannel>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001c34:	fa93 f3a3 	rbit	r3, r3
 8001c38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001c3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001c44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8001c4c:	2320      	movs	r3, #32
 8001c4e:	e004      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8001c50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c54:	fab3 f383 	clz	r3, r3
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d105      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x210>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	0e9b      	lsrs	r3, r3, #26
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	e018      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x242>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c80:	fa93 f3a3 	rbit	r3, r3
 8001c84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001c88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001c90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8001c98:	2320      	movs	r3, #32
 8001c9a:	e004      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8001c9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ca0:	fab3 f383 	clz	r3, r3
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d106      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fac0 	bl	8001238 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2102      	movs	r1, #2
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff faa4 	bl	800120c <LL_ADC_GetOffsetChannel>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10a      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x280>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2102      	movs	r1, #2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fa99 	bl	800120c <LL_ADC_GetOffsetChannel>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	0e9b      	lsrs	r3, r3, #26
 8001cde:	f003 021f 	and.w	r2, r3, #31
 8001ce2:	e01e      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x2be>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2102      	movs	r1, #2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fa8e 	bl	800120c <LL_ADC_GetOffsetChannel>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cfa:	fa93 f3a3 	rbit	r3, r3
 8001cfe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001d02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001d0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8001d12:	2320      	movs	r3, #32
 8001d14:	e004      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001d16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d1a:	fab3 f383 	clz	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	461a      	mov	r2, r3
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d105      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x2d6>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	0e9b      	lsrs	r3, r3, #26
 8001d34:	f003 031f 	and.w	r3, r3, #31
 8001d38:	e016      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x304>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d42:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d46:	fa93 f3a3 	rbit	r3, r3
 8001d4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001d4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001d52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8001d5a:	2320      	movs	r3, #32
 8001d5c:	e004      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8001d5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d106      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2200      	movs	r2, #0
 8001d72:	2102      	movs	r1, #2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fa5f 	bl	8001238 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2103      	movs	r1, #3
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fa43 	bl	800120c <LL_ADC_GetOffsetChannel>
 8001d86:	4603      	mov	r3, r0
 8001d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10a      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x342>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2103      	movs	r1, #3
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fa38 	bl	800120c <LL_ADC_GetOffsetChannel>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	0e9b      	lsrs	r3, r3, #26
 8001da0:	f003 021f 	and.w	r2, r3, #31
 8001da4:	e017      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x372>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2103      	movs	r1, #3
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fa2d 	bl	800120c <LL_ADC_GetOffsetChannel>
 8001db2:	4603      	mov	r3, r0
 8001db4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001db8:	fa93 f3a3 	rbit	r3, r3
 8001dbc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001dbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001dc0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001dc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8001dc8:	2320      	movs	r3, #32
 8001dca:	e003      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8001dcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d105      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x38a>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	0e9b      	lsrs	r3, r3, #26
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	e011      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x3ae>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001dfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001dfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001e00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8001e06:	2320      	movs	r3, #32
 8001e08:	e003      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8001e0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e0c:	fab3 f383 	clz	r3, r3
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d106      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2103      	movs	r1, #3
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fa0a 	bl	8001238 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fb25 	bl	8001478 <LL_ADC_IsEnabled>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f040 81c2 	bne.w	80021ba <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6818      	ldr	r0, [r3, #0]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	6819      	ldr	r1, [r3, #0]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	461a      	mov	r2, r3
 8001e44:	f7ff fa7e 	bl	8001344 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	4a8e      	ldr	r2, [pc, #568]	@ (8002088 <HAL_ADC_ConfigChannel+0x624>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	f040 8130 	bne.w	80020b4 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10b      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x418>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	0e9b      	lsrs	r3, r3, #26
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f003 031f 	and.w	r3, r3, #31
 8001e70:	2b09      	cmp	r3, #9
 8001e72:	bf94      	ite	ls
 8001e74:	2301      	movls	r3, #1
 8001e76:	2300      	movhi	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	e019      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x44c>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e84:	fa93 f3a3 	rbit	r3, r3
 8001e88:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001e8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e8c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001e8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8001e94:	2320      	movs	r3, #32
 8001e96:	e003      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8001e98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	f003 031f 	and.w	r3, r3, #31
 8001ea6:	2b09      	cmp	r3, #9
 8001ea8:	bf94      	ite	ls
 8001eaa:	2301      	movls	r3, #1
 8001eac:	2300      	movhi	r3, #0
 8001eae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d079      	beq.n	8001fa8 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d107      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x46c>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	0e9b      	lsrs	r3, r3, #26
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	069b      	lsls	r3, r3, #26
 8001eca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ece:	e015      	b.n	8001efc <HAL_ADC_ConfigChannel+0x498>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ed8:	fa93 f3a3 	rbit	r3, r3
 8001edc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001ede:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ee0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001ee8:	2320      	movs	r3, #32
 8001eea:	e003      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	069b      	lsls	r3, r3, #26
 8001ef8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d109      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x4b8>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	0e9b      	lsrs	r3, r3, #26
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	2101      	movs	r1, #1
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	e017      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x4e8>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f24:	fa93 f3a3 	rbit	r3, r3
 8001f28:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001f2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001f2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8001f34:	2320      	movs	r3, #32
 8001f36:	e003      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8001f38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f3a:	fab3 f383 	clz	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	3301      	adds	r3, #1
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	2101      	movs	r1, #1
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	ea42 0103 	orr.w	r1, r2, r3
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10a      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x50e>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	0e9b      	lsrs	r3, r3, #26
 8001f62:	3301      	adds	r3, #1
 8001f64:	f003 021f 	and.w	r2, r3, #31
 8001f68:	4613      	mov	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	4413      	add	r3, r2
 8001f6e:	051b      	lsls	r3, r3, #20
 8001f70:	e018      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x540>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001f8a:	2320      	movs	r3, #32
 8001f8c:	e003      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f90:	fab3 f383 	clz	r3, r3
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	3301      	adds	r3, #1
 8001f98:	f003 021f 	and.w	r2, r3, #31
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	4413      	add	r3, r2
 8001fa2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fa4:	430b      	orrs	r3, r1
 8001fa6:	e080      	b.n	80020aa <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d107      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x560>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	0e9b      	lsrs	r3, r3, #26
 8001fba:	3301      	adds	r3, #1
 8001fbc:	069b      	lsls	r3, r3, #26
 8001fbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fc2:	e015      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x58c>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fcc:	fa93 f3a3 	rbit	r3, r3
 8001fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fd4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8001fdc:	2320      	movs	r3, #32
 8001fde:	e003      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8001fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fe2:	fab3 f383 	clz	r3, r3
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	3301      	adds	r3, #1
 8001fea:	069b      	lsls	r3, r3, #26
 8001fec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d109      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x5ac>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	0e9b      	lsrs	r3, r3, #26
 8002002:	3301      	adds	r3, #1
 8002004:	f003 031f 	and.w	r3, r3, #31
 8002008:	2101      	movs	r1, #1
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	e017      	b.n	8002040 <HAL_ADC_ConfigChannel+0x5dc>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	fa93 f3a3 	rbit	r3, r3
 800201c:	61fb      	str	r3, [r7, #28]
  return result;
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002028:	2320      	movs	r3, #32
 800202a:	e003      	b.n	8002034 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 800202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202e:	fab3 f383 	clz	r3, r3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	3301      	adds	r3, #1
 8002036:	f003 031f 	and.w	r3, r3, #31
 800203a:	2101      	movs	r1, #1
 800203c:	fa01 f303 	lsl.w	r3, r1, r3
 8002040:	ea42 0103 	orr.w	r1, r2, r3
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10d      	bne.n	800206c <HAL_ADC_ConfigChannel+0x608>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	0e9b      	lsrs	r3, r3, #26
 8002056:	3301      	adds	r3, #1
 8002058:	f003 021f 	and.w	r2, r3, #31
 800205c:	4613      	mov	r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4413      	add	r3, r2
 8002062:	3b1e      	subs	r3, #30
 8002064:	051b      	lsls	r3, r3, #20
 8002066:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800206a:	e01d      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x644>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	613b      	str	r3, [r7, #16]
  return result;
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d103      	bne.n	800208c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002084:	2320      	movs	r3, #32
 8002086:	e005      	b.n	8002094 <HAL_ADC_ConfigChannel+0x630>
 8002088:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	3301      	adds	r3, #1
 8002096:	f003 021f 	and.w	r2, r3, #31
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	3b1e      	subs	r3, #30
 80020a2:	051b      	lsls	r3, r3, #20
 80020a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020a8:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020ae:	4619      	mov	r1, r3
 80020b0:	f7ff f91c 	bl	80012ec <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b45      	ldr	r3, [pc, #276]	@ (80021d0 <HAL_ADC_ConfigChannel+0x76c>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d07c      	beq.n	80021ba <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020c0:	4844      	ldr	r0, [pc, #272]	@ (80021d4 <HAL_ADC_ConfigChannel+0x770>)
 80020c2:	f7ff f871 	bl	80011a8 <LL_ADC_GetCommonPathInternalCh>
 80020c6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020ca:	4843      	ldr	r0, [pc, #268]	@ (80021d8 <HAL_ADC_ConfigChannel+0x774>)
 80020cc:	f7ff f9d4 	bl	8001478 <LL_ADC_IsEnabled>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d15e      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a40      	ldr	r2, [pc, #256]	@ (80021dc <HAL_ADC_ConfigChannel+0x778>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d127      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x6cc>
 80020e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d121      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a39      	ldr	r2, [pc, #228]	@ (80021d8 <HAL_ADC_ConfigChannel+0x774>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d161      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80020f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020fe:	4619      	mov	r1, r3
 8002100:	4834      	ldr	r0, [pc, #208]	@ (80021d4 <HAL_ADC_ConfigChannel+0x770>)
 8002102:	f7ff f83e 	bl	8001182 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002106:	4b36      	ldr	r3, [pc, #216]	@ (80021e0 <HAL_ADC_ConfigChannel+0x77c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	099b      	lsrs	r3, r3, #6
 800210c:	4a35      	ldr	r2, [pc, #212]	@ (80021e4 <HAL_ADC_ConfigChannel+0x780>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	099b      	lsrs	r3, r3, #6
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	4613      	mov	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002120:	e002      	b.n	8002128 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	3b01      	subs	r3, #1
 8002126:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f9      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800212e:	e044      	b.n	80021ba <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a2c      	ldr	r2, [pc, #176]	@ (80021e8 <HAL_ADC_ConfigChannel+0x784>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d113      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x6fe>
 800213a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800213e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10d      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a23      	ldr	r2, [pc, #140]	@ (80021d8 <HAL_ADC_ConfigChannel+0x774>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d134      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002150:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002154:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002158:	4619      	mov	r1, r3
 800215a:	481e      	ldr	r0, [pc, #120]	@ (80021d4 <HAL_ADC_ConfigChannel+0x770>)
 800215c:	f7ff f811 	bl	8001182 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002160:	e02b      	b.n	80021ba <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a21      	ldr	r2, [pc, #132]	@ (80021ec <HAL_ADC_ConfigChannel+0x788>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d126      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x756>
 800216c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002170:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d120      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a16      	ldr	r2, [pc, #88]	@ (80021d8 <HAL_ADC_ConfigChannel+0x774>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d11b      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002182:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002186:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800218a:	4619      	mov	r1, r3
 800218c:	4811      	ldr	r0, [pc, #68]	@ (80021d4 <HAL_ADC_ConfigChannel+0x770>)
 800218e:	f7fe fff8 	bl	8001182 <LL_ADC_SetCommonPathInternalCh>
 8002192:	e012      	b.n	80021ba <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002198:	f043 0220 	orr.w	r2, r3, #32
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80021a6:	e008      	b.n	80021ba <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ac:	f043 0220 	orr.w	r2, r3, #32
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80021c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	37d8      	adds	r7, #216	@ 0xd8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	80080000 	.word	0x80080000
 80021d4:	50040300 	.word	0x50040300
 80021d8:	50040000 	.word	0x50040000
 80021dc:	c7520000 	.word	0xc7520000
 80021e0:	2000000c 	.word	0x2000000c
 80021e4:	053e2d63 	.word	0x053e2d63
 80021e8:	cb840000 	.word	0xcb840000
 80021ec:	80000001 	.word	0x80000001

080021f0 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff f984 	bl	8001514 <LL_ADC_REG_IsConversionOngoing>
 800220c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff f9a5 	bl	8001562 <LL_ADC_INJ_IsConversionOngoing>
 8002218:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d103      	bne.n	8002228 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 8098 	beq.w	8002358 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d02a      	beq.n	800228c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	7e5b      	ldrb	r3, [r3, #25]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d126      	bne.n	800228c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	7e1b      	ldrb	r3, [r3, #24]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d122      	bne.n	800228c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002246:	2301      	movs	r3, #1
 8002248:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800224a:	e014      	b.n	8002276 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	4a45      	ldr	r2, [pc, #276]	@ (8002364 <ADC_ConversionStop+0x174>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d90d      	bls.n	8002270 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002258:	f043 0210 	orr.w	r2, r3, #16
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002264:	f043 0201 	orr.w	r2, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e074      	b.n	800235a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	3301      	adds	r3, #1
 8002274:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002280:	2b40      	cmp	r3, #64	@ 0x40
 8002282:	d1e3      	bne.n	800224c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2240      	movs	r2, #64	@ 0x40
 800228a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d014      	beq.n	80022bc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff f93c 	bl	8001514 <LL_ADC_REG_IsConversionOngoing>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00c      	beq.n	80022bc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff f8f9 	bl	800149e <LL_ADC_IsDisableOngoing>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d104      	bne.n	80022bc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff f918 	bl	80014ec <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d014      	beq.n	80022ec <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff f94b 	bl	8001562 <LL_ADC_INJ_IsConversionOngoing>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00c      	beq.n	80022ec <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff f8e1 	bl	800149e <LL_ADC_IsDisableOngoing>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d104      	bne.n	80022ec <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff f927 	bl	800153a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d005      	beq.n	80022fe <ADC_ConversionStop+0x10e>
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d105      	bne.n	8002304 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80022f8:	230c      	movs	r3, #12
 80022fa:	617b      	str	r3, [r7, #20]
        break;
 80022fc:	e005      	b.n	800230a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80022fe:	2308      	movs	r3, #8
 8002300:	617b      	str	r3, [r7, #20]
        break;
 8002302:	e002      	b.n	800230a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002304:	2304      	movs	r3, #4
 8002306:	617b      	str	r3, [r7, #20]
        break;
 8002308:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800230a:	f7fe feeb 	bl	80010e4 <HAL_GetTick>
 800230e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002310:	e01b      	b.n	800234a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002312:	f7fe fee7 	bl	80010e4 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b05      	cmp	r3, #5
 800231e:	d914      	bls.n	800234a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	4013      	ands	r3, r2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00d      	beq.n	800234a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002332:	f043 0210 	orr.w	r2, r3, #16
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233e:	f043 0201 	orr.w	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e007      	b.n	800235a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	4013      	ands	r3, r2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1dc      	bne.n	8002312 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3720      	adds	r7, #32
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	a33fffff 	.word	0xa33fffff

08002368 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002370:	2300      	movs	r3, #0
 8002372:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff f87d 	bl	8001478 <LL_ADC_IsEnabled>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d15e      	bne.n	8002442 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	4b30      	ldr	r3, [pc, #192]	@ (800244c <ADC_Enable+0xe4>)
 800238c:	4013      	ands	r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00d      	beq.n	80023ae <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002396:	f043 0210 	orr.w	r2, r3, #16
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a2:	f043 0201 	orr.w	r2, r3, #1
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e04a      	b.n	8002444 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff f838 	bl	8001428 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80023b8:	4825      	ldr	r0, [pc, #148]	@ (8002450 <ADC_Enable+0xe8>)
 80023ba:	f7fe fef5 	bl	80011a8 <LL_ADC_GetCommonPathInternalCh>
 80023be:	4603      	mov	r3, r0
 80023c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00f      	beq.n	80023e8 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023c8:	4b22      	ldr	r3, [pc, #136]	@ (8002454 <ADC_Enable+0xec>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	099b      	lsrs	r3, r3, #6
 80023ce:	4a22      	ldr	r2, [pc, #136]	@ (8002458 <ADC_Enable+0xf0>)
 80023d0:	fba2 2303 	umull	r2, r3, r2, r3
 80023d4:	099b      	lsrs	r3, r3, #6
 80023d6:	3301      	adds	r3, #1
 80023d8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80023da:	e002      	b.n	80023e2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	3b01      	subs	r3, #1
 80023e0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f9      	bne.n	80023dc <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80023e8:	f7fe fe7c 	bl	80010e4 <HAL_GetTick>
 80023ec:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023ee:	e021      	b.n	8002434 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff f83f 	bl	8001478 <LL_ADC_IsEnabled>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d104      	bne.n	800240a <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff f80f 	bl	8001428 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800240a:	f7fe fe6b 	bl	80010e4 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d90d      	bls.n	8002434 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241c:	f043 0210 	orr.w	r2, r3, #16
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002428:	f043 0201 	orr.w	r2, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e007      	b.n	8002444 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b01      	cmp	r3, #1
 8002440:	d1d6      	bne.n	80023f0 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	8000003f 	.word	0x8000003f
 8002450:	50040300 	.word	0x50040300
 8002454:	2000000c 	.word	0x2000000c
 8002458:	053e2d63 	.word	0x053e2d63

0800245c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff f818 	bl	800149e <LL_ADC_IsDisableOngoing>
 800246e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f7fe ffff 	bl	8001478 <LL_ADC_IsEnabled>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d047      	beq.n	8002510 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d144      	bne.n	8002510 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 030d 	and.w	r3, r3, #13
 8002490:	2b01      	cmp	r3, #1
 8002492:	d10c      	bne.n	80024ae <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe ffd9 	bl	8001450 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2203      	movs	r2, #3
 80024a4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024a6:	f7fe fe1d 	bl	80010e4 <HAL_GetTick>
 80024aa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024ac:	e029      	b.n	8002502 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b2:	f043 0210 	orr.w	r2, r3, #16
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024be:	f043 0201 	orr.w	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e023      	b.n	8002512 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024ca:	f7fe fe0b 	bl	80010e4 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d914      	bls.n	8002502 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00d      	beq.n	8002502 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ea:	f043 0210 	orr.w	r2, r3, #16
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f6:	f043 0201 	orr.w	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e007      	b.n	8002512 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1dc      	bne.n	80024ca <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800252c:	4b0c      	ldr	r3, [pc, #48]	@ (8002560 <__NVIC_SetPriorityGrouping+0x44>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002538:	4013      	ands	r3, r2
 800253a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002544:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002548:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800254c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800254e:	4a04      	ldr	r2, [pc, #16]	@ (8002560 <__NVIC_SetPriorityGrouping+0x44>)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	60d3      	str	r3, [r2, #12]
}
 8002554:	bf00      	nop
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002568:	4b04      	ldr	r3, [pc, #16]	@ (800257c <__NVIC_GetPriorityGrouping+0x18>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	0a1b      	lsrs	r3, r3, #8
 800256e:	f003 0307 	and.w	r3, r3, #7
}
 8002572:	4618      	mov	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258e:	2b00      	cmp	r3, #0
 8002590:	db0b      	blt.n	80025aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	f003 021f 	and.w	r2, r3, #31
 8002598:	4907      	ldr	r1, [pc, #28]	@ (80025b8 <__NVIC_EnableIRQ+0x38>)
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	2001      	movs	r0, #1
 80025a2:	fa00 f202 	lsl.w	r2, r0, r2
 80025a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	e000e100 	.word	0xe000e100

080025bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	6039      	str	r1, [r7, #0]
 80025c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	db0a      	blt.n	80025e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	490c      	ldr	r1, [pc, #48]	@ (8002608 <__NVIC_SetPriority+0x4c>)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	0112      	lsls	r2, r2, #4
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	440b      	add	r3, r1
 80025e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e4:	e00a      	b.n	80025fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	4908      	ldr	r1, [pc, #32]	@ (800260c <__NVIC_SetPriority+0x50>)
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	3b04      	subs	r3, #4
 80025f4:	0112      	lsls	r2, r2, #4
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	440b      	add	r3, r1
 80025fa:	761a      	strb	r2, [r3, #24]
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	e000e100 	.word	0xe000e100
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	@ 0x24
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f1c3 0307 	rsb	r3, r3, #7
 800262a:	2b04      	cmp	r3, #4
 800262c:	bf28      	it	cs
 800262e:	2304      	movcs	r3, #4
 8002630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3304      	adds	r3, #4
 8002636:	2b06      	cmp	r3, #6
 8002638:	d902      	bls.n	8002640 <NVIC_EncodePriority+0x30>
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3b03      	subs	r3, #3
 800263e:	e000      	b.n	8002642 <NVIC_EncodePriority+0x32>
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002644:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43da      	mvns	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	401a      	ands	r2, r3
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002658:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	fa01 f303 	lsl.w	r3, r1, r3
 8002662:	43d9      	mvns	r1, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002668:	4313      	orrs	r3, r2
         );
}
 800266a:	4618      	mov	r0, r3
 800266c:	3724      	adds	r7, #36	@ 0x24
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
	...

08002678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3b01      	subs	r3, #1
 8002684:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002688:	d301      	bcc.n	800268e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800268a:	2301      	movs	r3, #1
 800268c:	e00f      	b.n	80026ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800268e:	4a0a      	ldr	r2, [pc, #40]	@ (80026b8 <SysTick_Config+0x40>)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3b01      	subs	r3, #1
 8002694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002696:	210f      	movs	r1, #15
 8002698:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800269c:	f7ff ff8e 	bl	80025bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a0:	4b05      	ldr	r3, [pc, #20]	@ (80026b8 <SysTick_Config+0x40>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026a6:	4b04      	ldr	r3, [pc, #16]	@ (80026b8 <SysTick_Config+0x40>)
 80026a8:	2207      	movs	r2, #7
 80026aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	e000e010 	.word	0xe000e010

080026bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7ff ff29 	bl	800251c <__NVIC_SetPriorityGrouping>
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b086      	sub	sp, #24
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	4603      	mov	r3, r0
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	607a      	str	r2, [r7, #4]
 80026de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026e0:	f7ff ff40 	bl	8002564 <__NVIC_GetPriorityGrouping>
 80026e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	6978      	ldr	r0, [r7, #20]
 80026ec:	f7ff ff90 	bl	8002610 <NVIC_EncodePriority>
 80026f0:	4602      	mov	r2, r0
 80026f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f6:	4611      	mov	r1, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff5f 	bl	80025bc <__NVIC_SetPriority>
}
 80026fe:	bf00      	nop
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff33 	bl	8002580 <__NVIC_EnableIRQ>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff ffa4 	bl	8002678 <SysTick_Config>
 8002730:	4603      	mov	r3, r0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800274a:	e14c      	b.n	80029e6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	2101      	movs	r1, #1
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	fa01 f303 	lsl.w	r3, r1, r3
 8002758:	4013      	ands	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 813e 	beq.w	80029e0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	2b01      	cmp	r3, #1
 800276e:	d005      	beq.n	800277c <HAL_GPIO_Init+0x40>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 0303 	and.w	r3, r3, #3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d130      	bne.n	80027de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	2203      	movs	r2, #3
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027b2:	2201      	movs	r2, #1
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4013      	ands	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	091b      	lsrs	r3, r3, #4
 80027c8:	f003 0201 	and.w	r2, r3, #1
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d017      	beq.n	800281a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	2203      	movs	r2, #3
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4013      	ands	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d123      	bne.n	800286e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	08da      	lsrs	r2, r3, #3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3208      	adds	r2, #8
 800282e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002832:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	220f      	movs	r2, #15
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43db      	mvns	r3, r3
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4013      	ands	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	08da      	lsrs	r2, r3, #3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3208      	adds	r2, #8
 8002868:	6939      	ldr	r1, [r7, #16]
 800286a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	2203      	movs	r2, #3
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4013      	ands	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 0203 	and.w	r2, r3, #3
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 8098 	beq.w	80029e0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80028b0:	4a54      	ldr	r2, [pc, #336]	@ (8002a04 <HAL_GPIO_Init+0x2c8>)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	089b      	lsrs	r3, r3, #2
 80028b6:	3302      	adds	r3, #2
 80028b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	220f      	movs	r2, #15
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4013      	ands	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80028da:	d019      	beq.n	8002910 <HAL_GPIO_Init+0x1d4>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a4a      	ldr	r2, [pc, #296]	@ (8002a08 <HAL_GPIO_Init+0x2cc>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d013      	beq.n	800290c <HAL_GPIO_Init+0x1d0>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a49      	ldr	r2, [pc, #292]	@ (8002a0c <HAL_GPIO_Init+0x2d0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d00d      	beq.n	8002908 <HAL_GPIO_Init+0x1cc>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a48      	ldr	r2, [pc, #288]	@ (8002a10 <HAL_GPIO_Init+0x2d4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d007      	beq.n	8002904 <HAL_GPIO_Init+0x1c8>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a47      	ldr	r2, [pc, #284]	@ (8002a14 <HAL_GPIO_Init+0x2d8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d101      	bne.n	8002900 <HAL_GPIO_Init+0x1c4>
 80028fc:	2304      	movs	r3, #4
 80028fe:	e008      	b.n	8002912 <HAL_GPIO_Init+0x1d6>
 8002900:	2307      	movs	r3, #7
 8002902:	e006      	b.n	8002912 <HAL_GPIO_Init+0x1d6>
 8002904:	2303      	movs	r3, #3
 8002906:	e004      	b.n	8002912 <HAL_GPIO_Init+0x1d6>
 8002908:	2302      	movs	r3, #2
 800290a:	e002      	b.n	8002912 <HAL_GPIO_Init+0x1d6>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <HAL_GPIO_Init+0x1d6>
 8002910:	2300      	movs	r3, #0
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	f002 0203 	and.w	r2, r2, #3
 8002918:	0092      	lsls	r2, r2, #2
 800291a:	4093      	lsls	r3, r2
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002922:	4938      	ldr	r1, [pc, #224]	@ (8002a04 <HAL_GPIO_Init+0x2c8>)
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	089b      	lsrs	r3, r3, #2
 8002928:	3302      	adds	r3, #2
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002930:	4b39      	ldr	r3, [pc, #228]	@ (8002a18 <HAL_GPIO_Init+0x2dc>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	43db      	mvns	r3, r3
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	4013      	ands	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002954:	4a30      	ldr	r2, [pc, #192]	@ (8002a18 <HAL_GPIO_Init+0x2dc>)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800295a:	4b2f      	ldr	r3, [pc, #188]	@ (8002a18 <HAL_GPIO_Init+0x2dc>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	43db      	mvns	r3, r3
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4013      	ands	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4313      	orrs	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800297e:	4a26      	ldr	r2, [pc, #152]	@ (8002a18 <HAL_GPIO_Init+0x2dc>)
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002984:	4b24      	ldr	r3, [pc, #144]	@ (8002a18 <HAL_GPIO_Init+0x2dc>)
 8002986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800298a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	43db      	mvns	r3, r3
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4013      	ands	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002a18 <HAL_GPIO_Init+0x2dc>)
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80029b2:	4b19      	ldr	r3, [pc, #100]	@ (8002a18 <HAL_GPIO_Init+0x2dc>)
 80029b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	43db      	mvns	r3, r3
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002a18 <HAL_GPIO_Init+0x2dc>)
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	3301      	adds	r3, #1
 80029e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	fa22 f303 	lsr.w	r3, r2, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f47f aeab 	bne.w	800274c <HAL_GPIO_Init+0x10>
  }
}
 80029f6:	bf00      	nop
 80029f8:	bf00      	nop
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	40010000 	.word	0x40010000
 8002a08:	48000400 	.word	0x48000400
 8002a0c:	48000800 	.word	0x48000800
 8002a10:	48000c00 	.word	0x48000c00
 8002a14:	48001000 	.word	0x48001000
 8002a18:	58000800 	.word	0x58000800

08002a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	807b      	strh	r3, [r7, #2]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a2c:	787b      	ldrb	r3, [r7, #1]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a32:	887a      	ldrh	r2, [r7, #2]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a38:	e002      	b.n	8002a40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a3a:	887a      	ldrh	r2, [r7, #2]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a5e:	887a      	ldrh	r2, [r7, #2]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4013      	ands	r3, r2
 8002a64:	041a      	lsls	r2, r3, #16
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	43d9      	mvns	r1, r3
 8002a6a:	887b      	ldrh	r3, [r7, #2]
 8002a6c:	400b      	ands	r3, r1
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	619a      	str	r2, [r3, #24]
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a84:	4b05      	ldr	r3, [pc, #20]	@ (8002a9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a04      	ldr	r2, [pc, #16]	@ (8002a9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a8e:	6013      	str	r3, [r2, #0]
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	58000400 	.word	0x58000400

08002aa0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002aa4:	4b04      	ldr	r3, [pc, #16]	@ (8002ab8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	58000400 	.word	0x58000400

08002abc <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002ac0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ace:	d101      	bne.n	8002ad4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e000      	b.n	8002ad6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002afe:	b480      	push	{r7}
 8002b00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b10:	6013      	str	r3, [r2, #0]
}
 8002b12:	bf00      	nop
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002b20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b2e:	d101      	bne.n	8002b34 <LL_RCC_HSE_IsReady+0x18>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <LL_RCC_HSE_IsReady+0x1a>
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002b44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b52:	6013      	str	r3, [r2, #0]
}
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002b62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b70:	6013      	str	r3, [r2, #0]
}
 8002b72:	bf00      	nop
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002b80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b8e:	d101      	bne.n	8002b94 <LL_RCC_HSI_IsReady+0x18>
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <LL_RCC_HSI_IsReady+0x1a>
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002ba8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	061b      	lsls	r3, r3, #24
 8002bb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002be2:	bf00      	nop
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002bf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bf8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002c12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d101      	bne.n	8002c26 <LL_RCC_HSI48_IsReady+0x18>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <LL_RCC_HSI48_IsReady+0x1a>
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002c32:	b480      	push	{r7}
 8002c34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002c4a:	bf00      	nop
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002c6c:	bf00      	nop
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8002c76:	b480      	push	{r7}
 8002c78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c86:	f043 0304 	orr.w	r3, r3, #4
 8002c8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002c8e:	bf00      	nop
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ca8:	f023 0304 	bic.w	r3, r3, #4
 8002cac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002cbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d101      	bne.n	8002cd2 <LL_RCC_LSE_IsReady+0x18>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <LL_RCC_LSE_IsReady+0x1a>
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002ce2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002cf6:	bf00      	nop
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002d04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d10:	f023 0301 	bic.w	r3, r3, #1
 8002d14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002d18:	bf00      	nop
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002d22:	b480      	push	{r7}
 8002d24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002d26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d101      	bne.n	8002d3a <LL_RCC_LSI1_IsReady+0x18>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <LL_RCC_LSI1_IsReady+0x1a>
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002d46:	b480      	push	{r7}
 8002d48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d56:	f043 0304 	orr.w	r3, r3, #4
 8002d5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002d5e:	bf00      	nop
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002d6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d78:	f023 0304 	bic.w	r3, r3, #4
 8002d7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002d8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d101      	bne.n	8002da2 <LL_RCC_LSI2_IsReady+0x18>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <LL_RCC_LSI2_IsReady+0x1a>
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002db6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dbe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	021b      	lsls	r3, r3, #8
 8002dc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002de0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	6013      	str	r3, [r2, #0]
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002dfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	6013      	str	r3, [r2, #0]
}
 8002e0e:	bf00      	nop
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002e1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d101      	bne.n	8002e2e <LL_RCC_MSI_IsReady+0x16>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <LL_RCC_MSI_IsReady+0x18>
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002e42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002e68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e72:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2bb0      	cmp	r3, #176	@ 0xb0
 8002e78:	d901      	bls.n	8002e7e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002e7a:	23b0      	movs	r3, #176	@ 0xb0
 8002e7c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002e7e:	687b      	ldr	r3, [r7, #4]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	021b      	lsls	r3, r3, #8
 8002ea2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	604b      	str	r3, [r1, #4]
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002ebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f023 0203 	bic.w	r2, r3, #3
 8002ec8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	608b      	str	r3, [r1, #8]
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002ee2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 030c 	and.w	r3, r3, #12
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002efe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	608b      	str	r3, [r1, #8]
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002f26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002f2e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002f52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f56:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002f5a:	f023 020f 	bic.w	r2, r3, #15
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002f80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	608b      	str	r3, [r1, #8]
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002fa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	608b      	str	r3, [r1, #8]
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002fcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002fe4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fe8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800300a:	4618      	mov	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003018:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8003022:	4618      	mov	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800303a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800303e:	6013      	str	r3, [r2, #0]
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800304a:	b480      	push	{r7}
 800304c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800304e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003058:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800305c:	6013      	str	r3, [r2, #0]
}
 800305e:	bf00      	nop
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800306c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003076:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800307a:	d101      	bne.n	8003080 <LL_RCC_PLL_IsReady+0x18>
 800307c:	2301      	movs	r3, #1
 800307e:	e000      	b.n	8003082 <LL_RCC_PLL_IsReady+0x1a>
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003090:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	0a1b      	lsrs	r3, r3, #8
 8003098:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80030a6:	b480      	push	{r7}
 80030a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80030be:	b480      	push	{r7}
 80030c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80030c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80030d6:	b480      	push	{r7}
 80030d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80030da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 0303 	and.w	r3, r3, #3
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80030ee:	b480      	push	{r7}
 80030f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80030f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003100:	d101      	bne.n	8003106 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003116:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800311a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800311e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003122:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003126:	d101      	bne.n	800312c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800313c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003140:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003144:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800314c:	d101      	bne.n	8003152 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800315e:	b480      	push	{r7}
 8003160:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003162:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003170:	d101      	bne.n	8003176 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003182:	b480      	push	{r7}
 8003184:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003186:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003190:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003194:	d101      	bne.n	800319a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
	...

080031a8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b08d      	sub	sp, #52	@ 0x34
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e363      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 808d 	beq.w	80032e2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031c8:	f7ff fe89 	bl	8002ede <LL_RCC_GetSysClkSource>
 80031cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031ce:	f7ff ff82 	bl	80030d6 <LL_RCC_PLL_GetMainSource>
 80031d2:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80031d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <HAL_RCC_OscConfig+0x3e>
 80031da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031dc:	2b0c      	cmp	r3, #12
 80031de:	d147      	bne.n	8003270 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80031e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d144      	bne.n	8003270 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e347      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80031f6:	f7ff fe34 	bl	8002e62 <LL_RCC_MSI_GetRange>
 80031fa:	4603      	mov	r3, r0
 80031fc:	429c      	cmp	r4, r3
 80031fe:	d914      	bls.n	800322a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003204:	4618      	mov	r0, r3
 8003206:	f000 fd2f 	bl	8003c68 <RCC_SetFlashLatencyFromMSIRange>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e336      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fe0e 	bl	8002e3a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fe32 	bl	8002e8c <LL_RCC_MSI_SetCalibTrimming>
 8003228:	e013      	b.n	8003252 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fe03 	bl	8002e3a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff fe27 	bl	8002e8c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003242:	4618      	mov	r0, r3
 8003244:	f000 fd10 	bl	8003c68 <RCC_SetFlashLatencyFromMSIRange>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e317      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003252:	f000 fcc9 	bl	8003be8 <HAL_RCC_GetHCLKFreq>
 8003256:	4603      	mov	r3, r0
 8003258:	4aa4      	ldr	r2, [pc, #656]	@ (80034ec <HAL_RCC_OscConfig+0x344>)
 800325a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800325c:	4ba4      	ldr	r3, [pc, #656]	@ (80034f0 <HAL_RCC_OscConfig+0x348>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7fd fef1 	bl	8001048 <HAL_InitTick>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d039      	beq.n	80032e0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e308      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01e      	beq.n	80032b6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003278:	f7ff fdb0 	bl	8002ddc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800327c:	f7fd ff32 	bl	80010e4 <HAL_GetTick>
 8003280:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003284:	f7fd ff2e 	bl	80010e4 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e2f5      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003296:	f7ff fdbf 	bl	8002e18 <LL_RCC_MSI_IsReady>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0f1      	beq.n	8003284 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff fdc8 	bl	8002e3a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fdec 	bl	8002e8c <LL_RCC_MSI_SetCalibTrimming>
 80032b4:	e015      	b.n	80032e2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032b6:	f7ff fda0 	bl	8002dfa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032ba:	f7fd ff13 	bl	80010e4 <HAL_GetTick>
 80032be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032c2:	f7fd ff0f 	bl	80010e4 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e2d6      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80032d4:	f7ff fda0 	bl	8002e18 <LL_RCC_MSI_IsReady>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f1      	bne.n	80032c2 <HAL_RCC_OscConfig+0x11a>
 80032de:	e000      	b.n	80032e2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80032e0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d047      	beq.n	800337e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ee:	f7ff fdf6 	bl	8002ede <LL_RCC_GetSysClkSource>
 80032f2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032f4:	f7ff feef 	bl	80030d6 <LL_RCC_PLL_GetMainSource>
 80032f8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d005      	beq.n	800330c <HAL_RCC_OscConfig+0x164>
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	2b0c      	cmp	r3, #12
 8003304:	d108      	bne.n	8003318 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	2b03      	cmp	r3, #3
 800330a:	d105      	bne.n	8003318 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d134      	bne.n	800337e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e2b4      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003320:	d102      	bne.n	8003328 <HAL_RCC_OscConfig+0x180>
 8003322:	f7ff fbdd 	bl	8002ae0 <LL_RCC_HSE_Enable>
 8003326:	e001      	b.n	800332c <HAL_RCC_OscConfig+0x184>
 8003328:	f7ff fbe9 	bl	8002afe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d012      	beq.n	800335a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003334:	f7fd fed6 	bl	80010e4 <HAL_GetTick>
 8003338:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800333c:	f7fd fed2 	bl	80010e4 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b64      	cmp	r3, #100	@ 0x64
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e299      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800334e:	f7ff fbe5 	bl	8002b1c <LL_RCC_HSE_IsReady>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f1      	beq.n	800333c <HAL_RCC_OscConfig+0x194>
 8003358:	e011      	b.n	800337e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335a:	f7fd fec3 	bl	80010e4 <HAL_GetTick>
 800335e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003362:	f7fd febf 	bl	80010e4 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b64      	cmp	r3, #100	@ 0x64
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e286      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003374:	f7ff fbd2 	bl	8002b1c <LL_RCC_HSE_IsReady>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f1      	bne.n	8003362 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d04c      	beq.n	8003424 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800338a:	f7ff fda8 	bl	8002ede <LL_RCC_GetSysClkSource>
 800338e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003390:	f7ff fea1 	bl	80030d6 <LL_RCC_PLL_GetMainSource>
 8003394:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	2b04      	cmp	r3, #4
 800339a:	d005      	beq.n	80033a8 <HAL_RCC_OscConfig+0x200>
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2b0c      	cmp	r3, #12
 80033a0:	d10e      	bne.n	80033c0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d10b      	bne.n	80033c0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e266      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fbf1 	bl	8002ba0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80033be:	e031      	b.n	8003424 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d019      	beq.n	80033fc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c8:	f7ff fbba 	bl	8002b40 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fd fe8a 	bl	80010e4 <HAL_GetTick>
 80033d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d4:	f7fd fe86 	bl	80010e4 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e24d      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80033e6:	f7ff fbc9 	bl	8002b7c <LL_RCC_HSI_IsReady>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0f1      	beq.n	80033d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff fbd3 	bl	8002ba0 <LL_RCC_HSI_SetCalibTrimming>
 80033fa:	e013      	b.n	8003424 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033fc:	f7ff fbaf 	bl	8002b5e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fd fe70 	bl	80010e4 <HAL_GetTick>
 8003404:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003408:	f7fd fe6c 	bl	80010e4 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e233      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800341a:	f7ff fbaf 	bl	8002b7c <LL_RCC_HSI_IsReady>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f1      	bne.n	8003408 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b00      	cmp	r3, #0
 800342e:	d106      	bne.n	800343e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 80a3 	beq.w	8003584 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d076      	beq.n	8003534 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0310 	and.w	r3, r3, #16
 800344e:	2b00      	cmp	r3, #0
 8003450:	d046      	beq.n	80034e0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003452:	f7ff fc66 	bl	8002d22 <LL_RCC_LSI1_IsReady>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d113      	bne.n	8003484 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800345c:	f7ff fc3f 	bl	8002cde <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003460:	f7fd fe40 	bl	80010e4 <HAL_GetTick>
 8003464:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003468:	f7fd fe3c 	bl	80010e4 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e203      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800347a:	f7ff fc52 	bl	8002d22 <LL_RCC_LSI1_IsReady>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f1      	beq.n	8003468 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003484:	f7ff fc5f 	bl	8002d46 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fd fe2c 	bl	80010e4 <HAL_GetTick>
 800348c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003490:	f7fd fe28 	bl	80010e4 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b03      	cmp	r3, #3
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e1ef      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80034a2:	f7ff fc72 	bl	8002d8a <LL_RCC_LSI2_IsReady>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f1      	beq.n	8003490 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff fc7c 	bl	8002dae <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80034b6:	f7ff fc23 	bl	8002d00 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ba:	f7fd fe13 	bl	80010e4 <HAL_GetTick>
 80034be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80034c2:	f7fd fe0f 	bl	80010e4 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e1d6      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80034d4:	f7ff fc25 	bl	8002d22 <LL_RCC_LSI1_IsReady>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f1      	bne.n	80034c2 <HAL_RCC_OscConfig+0x31a>
 80034de:	e051      	b.n	8003584 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80034e0:	f7ff fbfd 	bl	8002cde <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fd fdfe 	bl	80010e4 <HAL_GetTick>
 80034e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80034ea:	e00c      	b.n	8003506 <HAL_RCC_OscConfig+0x35e>
 80034ec:	2000000c 	.word	0x2000000c
 80034f0:	2000002c 	.word	0x2000002c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80034f4:	f7fd fdf6 	bl	80010e4 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e1bd      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003506:	f7ff fc0c 	bl	8002d22 <LL_RCC_LSI1_IsReady>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f1      	beq.n	80034f4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003510:	f7ff fc2a 	bl	8002d68 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003516:	f7fd fde5 	bl	80010e4 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b03      	cmp	r3, #3
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e1ac      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003528:	f7ff fc2f 	bl	8002d8a <LL_RCC_LSI2_IsReady>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f1      	bne.n	8003516 <HAL_RCC_OscConfig+0x36e>
 8003532:	e027      	b.n	8003584 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003534:	f7ff fc18 	bl	8002d68 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003538:	f7fd fdd4 	bl	80010e4 <HAL_GetTick>
 800353c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003540:	f7fd fdd0 	bl	80010e4 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b03      	cmp	r3, #3
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e197      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003552:	f7ff fc1a 	bl	8002d8a <LL_RCC_LSI2_IsReady>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1f1      	bne.n	8003540 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800355c:	f7ff fbd0 	bl	8002d00 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003560:	f7fd fdc0 	bl	80010e4 <HAL_GetTick>
 8003564:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003568:	f7fd fdbc 	bl	80010e4 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e183      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800357a:	f7ff fbd2 	bl	8002d22 <LL_RCC_LSI1_IsReady>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1f1      	bne.n	8003568 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	d05b      	beq.n	8003648 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003590:	4ba7      	ldr	r3, [pc, #668]	@ (8003830 <HAL_RCC_OscConfig+0x688>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	d114      	bne.n	80035c6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800359c:	f7ff fa70 	bl	8002a80 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a0:	f7fd fda0 	bl	80010e4 <HAL_GetTick>
 80035a4:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a8:	f7fd fd9c 	bl	80010e4 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e163      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ba:	4b9d      	ldr	r3, [pc, #628]	@ (8003830 <HAL_RCC_OscConfig+0x688>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d102      	bne.n	80035d4 <HAL_RCC_OscConfig+0x42c>
 80035ce:	f7ff fb30 	bl	8002c32 <LL_RCC_LSE_Enable>
 80035d2:	e00c      	b.n	80035ee <HAL_RCC_OscConfig+0x446>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b05      	cmp	r3, #5
 80035da:	d104      	bne.n	80035e6 <HAL_RCC_OscConfig+0x43e>
 80035dc:	f7ff fb4b 	bl	8002c76 <LL_RCC_LSE_EnableBypass>
 80035e0:	f7ff fb27 	bl	8002c32 <LL_RCC_LSE_Enable>
 80035e4:	e003      	b.n	80035ee <HAL_RCC_OscConfig+0x446>
 80035e6:	f7ff fb35 	bl	8002c54 <LL_RCC_LSE_Disable>
 80035ea:	f7ff fb55 	bl	8002c98 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d014      	beq.n	8003620 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f6:	f7fd fd75 	bl	80010e4 <HAL_GetTick>
 80035fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80035fc:	e00a      	b.n	8003614 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fe:	f7fd fd71 	bl	80010e4 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800360c:	4293      	cmp	r3, r2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e136      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003614:	f7ff fb51 	bl	8002cba <LL_RCC_LSE_IsReady>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0ef      	beq.n	80035fe <HAL_RCC_OscConfig+0x456>
 800361e:	e013      	b.n	8003648 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003620:	f7fd fd60 	bl	80010e4 <HAL_GetTick>
 8003624:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003626:	e00a      	b.n	800363e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003628:	f7fd fd5c 	bl	80010e4 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e121      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800363e:	f7ff fb3c 	bl	8002cba <LL_RCC_LSE_IsReady>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1ef      	bne.n	8003628 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003650:	2b00      	cmp	r3, #0
 8003652:	d02c      	beq.n	80036ae <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003658:	2b00      	cmp	r3, #0
 800365a:	d014      	beq.n	8003686 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800365c:	f7ff fab5 	bl	8002bca <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003660:	f7fd fd40 	bl	80010e4 <HAL_GetTick>
 8003664:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003668:	f7fd fd3c 	bl	80010e4 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e103      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800367a:	f7ff fac8 	bl	8002c0e <LL_RCC_HSI48_IsReady>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0f1      	beq.n	8003668 <HAL_RCC_OscConfig+0x4c0>
 8003684:	e013      	b.n	80036ae <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003686:	f7ff fab1 	bl	8002bec <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368a:	f7fd fd2b 	bl	80010e4 <HAL_GetTick>
 800368e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003692:	f7fd fd27 	bl	80010e4 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e0ee      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80036a4:	f7ff fab3 	bl	8002c0e <LL_RCC_HSI48_IsReady>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f1      	bne.n	8003692 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 80e4 	beq.w	8003880 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036b8:	f7ff fc11 	bl	8002ede <LL_RCC_GetSysClkSource>
 80036bc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80036be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	f040 80b4 	bne.w	8003838 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 0203 	and.w	r2, r3, #3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036da:	429a      	cmp	r2, r3
 80036dc:	d123      	bne.n	8003726 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d11c      	bne.n	8003726 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	0a1b      	lsrs	r3, r3, #8
 80036f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d114      	bne.n	8003726 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003706:	429a      	cmp	r2, r3
 8003708:	d10d      	bne.n	8003726 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003714:	429a      	cmp	r2, r3
 8003716:	d106      	bne.n	8003726 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003722:	429a      	cmp	r2, r3
 8003724:	d05d      	beq.n	80037e2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b0c      	cmp	r3, #12
 800372a:	d058      	beq.n	80037de <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800372c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e0a1      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800373e:	f7ff fc84 	bl	800304a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003742:	f7fd fccf 	bl	80010e4 <HAL_GetTick>
 8003746:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374a:	f7fd fccb 	bl	80010e4 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e092      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800375c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1ef      	bne.n	800374a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800376a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	4b30      	ldr	r3, [pc, #192]	@ (8003834 <HAL_RCC_OscConfig+0x68c>)
 8003772:	4013      	ands	r3, r2
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800377c:	4311      	orrs	r1, r2
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003782:	0212      	lsls	r2, r2, #8
 8003784:	4311      	orrs	r1, r2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800378a:	4311      	orrs	r1, r2
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003790:	4311      	orrs	r1, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003796:	430a      	orrs	r2, r1
 8003798:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800379c:	4313      	orrs	r3, r2
 800379e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80037a0:	f7ff fc44 	bl	800302c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037b4:	f7fd fc96 	bl	80010e4 <HAL_GetTick>
 80037b8:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037bc:	f7fd fc92 	bl	80010e4 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e059      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0ef      	beq.n	80037bc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037dc:	e050      	b.n	8003880 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e04f      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d147      	bne.n	8003880 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037f0:	f7ff fc1c 	bl	800302c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003802:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003804:	f7fd fc6e 	bl	80010e4 <HAL_GetTick>
 8003808:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800380c:	f7fd fc6a 	bl	80010e4 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e031      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800381e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0ef      	beq.n	800380c <HAL_RCC_OscConfig+0x664>
 800382c:	e028      	b.n	8003880 <HAL_RCC_OscConfig+0x6d8>
 800382e:	bf00      	nop
 8003830:	58000400 	.word	0x58000400
 8003834:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	2b0c      	cmp	r3, #12
 800383c:	d01e      	beq.n	800387c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800383e:	f7ff fc04 	bl	800304a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003842:	f7fd fc4f 	bl	80010e4 <HAL_GetTick>
 8003846:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384a:	f7fd fc4b 	bl	80010e4 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e012      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800385c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1ef      	bne.n	800384a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800386a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003874:	4b05      	ldr	r3, [pc, #20]	@ (800388c <HAL_RCC_OscConfig+0x6e4>)
 8003876:	4013      	ands	r3, r2
 8003878:	60cb      	str	r3, [r1, #12]
 800387a:	e001      	b.n	8003880 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3734      	adds	r7, #52	@ 0x34
 8003886:	46bd      	mov	sp, r7
 8003888:	bd90      	pop	{r4, r7, pc}
 800388a:	bf00      	nop
 800388c:	eefefffc 	.word	0xeefefffc

08003890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e12d      	b.n	8003b00 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038a4:	4b98      	ldr	r3, [pc, #608]	@ (8003b08 <HAL_RCC_ClockConfig+0x278>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d91b      	bls.n	80038ea <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b2:	4b95      	ldr	r3, [pc, #596]	@ (8003b08 <HAL_RCC_ClockConfig+0x278>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f023 0207 	bic.w	r2, r3, #7
 80038ba:	4993      	ldr	r1, [pc, #588]	@ (8003b08 <HAL_RCC_ClockConfig+0x278>)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	4313      	orrs	r3, r2
 80038c0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c2:	f7fd fc0f 	bl	80010e4 <HAL_GetTick>
 80038c6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c8:	e008      	b.n	80038dc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80038ca:	f7fd fc0b 	bl	80010e4 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e111      	b.n	8003b00 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038dc:	4b8a      	ldr	r3, [pc, #552]	@ (8003b08 <HAL_RCC_ClockConfig+0x278>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d1ef      	bne.n	80038ca <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d016      	beq.n	8003924 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff fafb 	bl	8002ef6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003900:	f7fd fbf0 	bl	80010e4 <HAL_GetTick>
 8003904:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003906:	e008      	b.n	800391a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003908:	f7fd fbec 	bl	80010e4 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e0f2      	b.n	8003b00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800391a:	f7ff fbe8 	bl	80030ee <LL_RCC_IsActiveFlag_HPRE>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f1      	beq.n	8003908 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b00      	cmp	r3, #0
 800392e:	d016      	beq.n	800395e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff faf2 	bl	8002f1e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800393a:	f7fd fbd3 	bl	80010e4 <HAL_GetTick>
 800393e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003940:	e008      	b.n	8003954 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003942:	f7fd fbcf 	bl	80010e4 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e0d5      	b.n	8003b00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003954:	f7ff fbdd 	bl	8003112 <LL_RCC_IsActiveFlag_C2HPRE>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0f1      	beq.n	8003942 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003966:	2b00      	cmp	r3, #0
 8003968:	d016      	beq.n	8003998 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff faeb 	bl	8002f4a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003974:	f7fd fbb6 	bl	80010e4 <HAL_GetTick>
 8003978:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800397a:	e008      	b.n	800398e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800397c:	f7fd fbb2 	bl	80010e4 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e0b8      	b.n	8003b00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800398e:	f7ff fbd3 	bl	8003138 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0f1      	beq.n	800397c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d016      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff fae5 	bl	8002f78 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039ae:	f7fd fb99 	bl	80010e4 <HAL_GetTick>
 80039b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039b6:	f7fd fb95 	bl	80010e4 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e09b      	b.n	8003b00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80039c8:	f7ff fbc9 	bl	800315e <LL_RCC_IsActiveFlag_PPRE1>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f1      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d017      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff fadb 	bl	8002fa0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039ea:	f7fd fb7b 	bl	80010e4 <HAL_GetTick>
 80039ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039f2:	f7fd fb77 	bl	80010e4 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e07d      	b.n	8003b00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003a04:	f7ff fbbd 	bl	8003182 <LL_RCC_IsActiveFlag_PPRE2>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f1      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d043      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d106      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003a22:	f7ff f87b 	bl	8002b1c <LL_RCC_HSE_IsReady>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d11e      	bne.n	8003a6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e067      	b.n	8003b00 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	d106      	bne.n	8003a46 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003a38:	f7ff fb16 	bl	8003068 <LL_RCC_PLL_IsReady>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d113      	bne.n	8003a6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e05c      	b.n	8003b00 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003a4e:	f7ff f9e3 	bl	8002e18 <LL_RCC_MSI_IsReady>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d108      	bne.n	8003a6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e051      	b.n	8003b00 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003a5c:	f7ff f88e 	bl	8002b7c <LL_RCC_HSI_IsReady>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e04a      	b.n	8003b00 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff fa21 	bl	8002eb6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a74:	f7fd fb36 	bl	80010e4 <HAL_GetTick>
 8003a78:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7a:	e00a      	b.n	8003a92 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a7c:	f7fd fb32 	bl	80010e4 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e036      	b.n	8003b00 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a92:	f7ff fa24 	bl	8002ede <LL_RCC_GetSysClkSource>
 8003a96:	4602      	mov	r2, r0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d1ec      	bne.n	8003a7c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aa2:	4b19      	ldr	r3, [pc, #100]	@ (8003b08 <HAL_RCC_ClockConfig+0x278>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d21b      	bcs.n	8003ae8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab0:	4b15      	ldr	r3, [pc, #84]	@ (8003b08 <HAL_RCC_ClockConfig+0x278>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f023 0207 	bic.w	r2, r3, #7
 8003ab8:	4913      	ldr	r1, [pc, #76]	@ (8003b08 <HAL_RCC_ClockConfig+0x278>)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac0:	f7fd fb10 	bl	80010e4 <HAL_GetTick>
 8003ac4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ac8:	f7fd fb0c 	bl	80010e4 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e012      	b.n	8003b00 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ada:	4b0b      	ldr	r3, [pc, #44]	@ (8003b08 <HAL_RCC_ClockConfig+0x278>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d1ef      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003ae8:	f000 f87e 	bl	8003be8 <HAL_RCC_GetHCLKFreq>
 8003aec:	4603      	mov	r3, r0
 8003aee:	4a07      	ldr	r2, [pc, #28]	@ (8003b0c <HAL_RCC_ClockConfig+0x27c>)
 8003af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003af2:	f7fd fb03 	bl	80010fc <HAL_GetTickPrio>
 8003af6:	4603      	mov	r3, r0
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fd faa5 	bl	8001048 <HAL_InitTick>
 8003afe:	4603      	mov	r3, r0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	58004000 	.word	0x58004000
 8003b0c:	2000000c 	.word	0x2000000c

08003b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b10:	b590      	push	{r4, r7, lr}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b16:	f7ff f9e2 	bl	8002ede <LL_RCC_GetSysClkSource>
 8003b1a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10a      	bne.n	8003b38 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003b22:	f7ff f99e 	bl	8002e62 <LL_RCC_MSI_GetRange>
 8003b26:	4603      	mov	r3, r0
 8003b28:	091b      	lsrs	r3, r3, #4
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	4a2b      	ldr	r2, [pc, #172]	@ (8003bdc <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	e04b      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d102      	bne.n	8003b44 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b3e:	4b28      	ldr	r3, [pc, #160]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	e045      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d10a      	bne.n	8003b60 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003b4a:	f7fe ffb7 	bl	8002abc <LL_RCC_HSE_IsEnabledDiv2>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d102      	bne.n	8003b5a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003b54:	4b22      	ldr	r3, [pc, #136]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	e03a      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003b5a:	4b22      	ldr	r3, [pc, #136]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	e037      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003b60:	f7ff fab9 	bl	80030d6 <LL_RCC_PLL_GetMainSource>
 8003b64:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d003      	beq.n	8003b74 <HAL_RCC_GetSysClockFreq+0x64>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d003      	beq.n	8003b7a <HAL_RCC_GetSysClockFreq+0x6a>
 8003b72:	e00d      	b.n	8003b90 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003b74:	4b1a      	ldr	r3, [pc, #104]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b76:	60bb      	str	r3, [r7, #8]
        break;
 8003b78:	e015      	b.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003b7a:	f7fe ff9f 	bl	8002abc <LL_RCC_HSE_IsEnabledDiv2>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d102      	bne.n	8003b8a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003b84:	4b16      	ldr	r3, [pc, #88]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b86:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003b88:	e00d      	b.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003b8a:	4b16      	ldr	r3, [pc, #88]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b8c:	60bb      	str	r3, [r7, #8]
        break;
 8003b8e:	e00a      	b.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003b90:	f7ff f967 	bl	8002e62 <LL_RCC_MSI_GetRange>
 8003b94:	4603      	mov	r3, r0
 8003b96:	091b      	lsrs	r3, r3, #4
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	4a0f      	ldr	r2, [pc, #60]	@ (8003bdc <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba2:	60bb      	str	r3, [r7, #8]
        break;
 8003ba4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003ba6:	f7ff fa71 	bl	800308c <LL_RCC_PLL_GetN>
 8003baa:	4602      	mov	r2, r0
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	fb03 f402 	mul.w	r4, r3, r2
 8003bb2:	f7ff fa84 	bl	80030be <LL_RCC_PLL_GetDivider>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	091b      	lsrs	r3, r3, #4
 8003bba:	3301      	adds	r3, #1
 8003bbc:	fbb4 f4f3 	udiv	r4, r4, r3
 8003bc0:	f7ff fa71 	bl	80030a6 <LL_RCC_PLL_GetR>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	0f5b      	lsrs	r3, r3, #29
 8003bc8:	3301      	adds	r3, #1
 8003bca:	fbb4 f3f3 	udiv	r3, r4, r3
 8003bce:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd90      	pop	{r4, r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	08005fdc 	.word	0x08005fdc
 8003be0:	00f42400 	.word	0x00f42400
 8003be4:	01e84800 	.word	0x01e84800

08003be8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003be8:	b598      	push	{r3, r4, r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003bec:	f7ff ff90 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 8003bf0:	4604      	mov	r4, r0
 8003bf2:	f7ff f9e9 	bl	8002fc8 <LL_RCC_GetAHBPrescaler>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	091b      	lsrs	r3, r3, #4
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	4a03      	ldr	r2, [pc, #12]	@ (8003c0c <HAL_RCC_GetHCLKFreq+0x24>)
 8003c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c04:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	bd98      	pop	{r3, r4, r7, pc}
 8003c0c:	08005f7c 	.word	0x08005f7c

08003c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c10:	b598      	push	{r3, r4, r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003c14:	f7ff ffe8 	bl	8003be8 <HAL_RCC_GetHCLKFreq>
 8003c18:	4604      	mov	r4, r0
 8003c1a:	f7ff f9ef 	bl	8002ffc <LL_RCC_GetAPB1Prescaler>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	0a1b      	lsrs	r3, r3, #8
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	4a04      	ldr	r2, [pc, #16]	@ (8003c38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c2c:	f003 031f 	and.w	r3, r3, #31
 8003c30:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	bd98      	pop	{r3, r4, r7, pc}
 8003c38:	08005fbc 	.word	0x08005fbc

08003c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c3c:	b598      	push	{r3, r4, r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003c40:	f7ff ffd2 	bl	8003be8 <HAL_RCC_GetHCLKFreq>
 8003c44:	4604      	mov	r4, r0
 8003c46:	f7ff f9e5 	bl	8003014 <LL_RCC_GetAPB2Prescaler>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	0adb      	lsrs	r3, r3, #11
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	4a04      	ldr	r2, [pc, #16]	@ (8003c64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	bd98      	pop	{r3, r4, r7, pc}
 8003c64:	08005fbc 	.word	0x08005fbc

08003c68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003c68:	b590      	push	{r4, r7, lr}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2bb0      	cmp	r3, #176	@ 0xb0
 8003c74:	d903      	bls.n	8003c7e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003c76:	4b15      	ldr	r3, [pc, #84]	@ (8003ccc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	e007      	b.n	8003c8e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	091b      	lsrs	r3, r3, #4
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	4a11      	ldr	r2, [pc, #68]	@ (8003ccc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c8c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003c8e:	f7ff f9a7 	bl	8002fe0 <LL_RCC_GetAHB4Prescaler>
 8003c92:	4603      	mov	r3, r0
 8003c94:	091b      	lsrs	r3, r3, #4
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	4a0d      	ldr	r2, [pc, #52]	@ (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	4a0a      	ldr	r2, [pc, #40]	@ (8003cd4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003cac:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb0:	0c9c      	lsrs	r4, r3, #18
 8003cb2:	f7fe fef5 	bl	8002aa0 <HAL_PWREx_GetVoltageRange>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4620      	mov	r0, r4
 8003cbc:	f000 f80c 	bl	8003cd8 <RCC_SetFlashLatency>
 8003cc0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd90      	pop	{r4, r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	08005fdc 	.word	0x08005fdc
 8003cd0:	08005f7c 	.word	0x08005f7c
 8003cd4:	431bde83 	.word	0x431bde83

08003cd8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003cd8:	b590      	push	{r4, r7, lr}
 8003cda:	b093      	sub	sp, #76	@ 0x4c
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003ce2:	4b37      	ldr	r3, [pc, #220]	@ (8003dc0 <RCC_SetFlashLatency+0xe8>)
 8003ce4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003ce8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003cee:	4a35      	ldr	r2, [pc, #212]	@ (8003dc4 <RCC_SetFlashLatency+0xec>)
 8003cf0:	f107 031c 	add.w	r3, r7, #28
 8003cf4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003cfa:	4b33      	ldr	r3, [pc, #204]	@ (8003dc8 <RCC_SetFlashLatency+0xf0>)
 8003cfc:	f107 040c 	add.w	r4, r7, #12
 8003d00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003d06:	2300      	movs	r3, #0
 8003d08:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d10:	d11a      	bne.n	8003d48 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003d12:	2300      	movs	r3, #0
 8003d14:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d16:	e013      	b.n	8003d40 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003d18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	3348      	adds	r3, #72	@ 0x48
 8003d1e:	443b      	add	r3, r7
 8003d20:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d807      	bhi.n	8003d3a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	3348      	adds	r3, #72	@ 0x48
 8003d30:	443b      	add	r3, r7
 8003d32:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003d36:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003d38:	e020      	b.n	8003d7c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003d3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	d9e8      	bls.n	8003d18 <RCC_SetFlashLatency+0x40>
 8003d46:	e019      	b.n	8003d7c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003d48:	2300      	movs	r3, #0
 8003d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d4c:	e013      	b.n	8003d76 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	3348      	adds	r3, #72	@ 0x48
 8003d54:	443b      	add	r3, r7
 8003d56:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d807      	bhi.n	8003d70 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	3348      	adds	r3, #72	@ 0x48
 8003d66:	443b      	add	r3, r7
 8003d68:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003d6c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003d6e:	e005      	b.n	8003d7c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d72:	3301      	adds	r3, #1
 8003d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d9e8      	bls.n	8003d4e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003d7c:	4b13      	ldr	r3, [pc, #76]	@ (8003dcc <RCC_SetFlashLatency+0xf4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f023 0207 	bic.w	r2, r3, #7
 8003d84:	4911      	ldr	r1, [pc, #68]	@ (8003dcc <RCC_SetFlashLatency+0xf4>)
 8003d86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003d8c:	f7fd f9aa 	bl	80010e4 <HAL_GetTick>
 8003d90:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003d92:	e008      	b.n	8003da6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003d94:	f7fd f9a6 	bl	80010e4 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e007      	b.n	8003db6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003da6:	4b09      	ldr	r3, [pc, #36]	@ (8003dcc <RCC_SetFlashLatency+0xf4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d1ef      	bne.n	8003d94 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	374c      	adds	r7, #76	@ 0x4c
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd90      	pop	{r4, r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	08005f50 	.word	0x08005f50
 8003dc4:	08005f60 	.word	0x08005f60
 8003dc8:	08005f6c 	.word	0x08005f6c
 8003dcc:	58004000 	.word	0x58004000

08003dd0 <LL_RCC_LSE_IsEnabled>:
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003dd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <LL_RCC_LSE_IsEnabled+0x18>
 8003de4:	2301      	movs	r3, #1
 8003de6:	e000      	b.n	8003dea <LL_RCC_LSE_IsEnabled+0x1a>
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <LL_RCC_LSE_IsReady>:
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003df8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d101      	bne.n	8003e0c <LL_RCC_LSE_IsReady+0x18>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <LL_RCC_LSE_IsReady+0x1a>
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <LL_RCC_SetRFWKPClockSource>:
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003e20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e28:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <LL_RCC_SetSMPSClockSource>:
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e52:	f023 0203 	bic.w	r2, r3, #3
 8003e56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <LL_RCC_SetSMPSPrescaler>:
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003e74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <LL_RCC_SetUSARTClockSource>:
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea4:	f023 0203 	bic.w	r2, r3, #3
 8003ea8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <LL_RCC_SetLPUARTClockSource>:
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ed4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <LL_RCC_SetI2CClockSource>:
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003ef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ef8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	091b      	lsrs	r3, r3, #4
 8003f00:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003f04:	43db      	mvns	r3, r3
 8003f06:	401a      	ands	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003f10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <LL_RCC_SetLPTIMClockSource>:
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003f2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f32:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	0c1b      	lsrs	r3, r3, #16
 8003f3a:	041b      	lsls	r3, r3, #16
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	401a      	ands	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	041b      	lsls	r3, r3, #16
 8003f44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <LL_RCC_SetSAIClockSource>:
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003f62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <LL_RCC_SetRNGClockSource>:
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003f8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f96:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003f9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <LL_RCC_SetCLK48ClockSource>:
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003fba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <LL_RCC_SetUSBClockSource>:
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b082      	sub	sp, #8
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7ff ffe3 	bl	8003fb2 <LL_RCC_SetCLK48ClockSource>
}
 8003fec:	bf00      	nop
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <LL_RCC_SetADCClockSource>:
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003ffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004004:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004008:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <LL_RCC_SetRTCClockSource>:
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004028:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800402c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004030:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004034:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <LL_RCC_GetRTCClockSource>:
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004050:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004058:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800405c:	4618      	mov	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <LL_RCC_ForceBackupDomainReset>:
{
 8004066:	b480      	push	{r7}
 8004068:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800406a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004072:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004076:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800407a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800407e:	bf00      	nop
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800408c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004094:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004098:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800409c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80040a0:	bf00      	nop
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <LL_RCC_PLLSAI1_Enable>:
{
 80040aa:	b480      	push	{r7}
 80040ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80040ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040bc:	6013      	str	r3, [r2, #0]
}
 80040be:	bf00      	nop
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <LL_RCC_PLLSAI1_Disable>:
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80040cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80040da:	6013      	str	r3, [r2, #0]
}
 80040dc:	bf00      	nop
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <LL_RCC_PLLSAI1_IsReady>:
{
 80040e6:	b480      	push	{r7}
 80040e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80040ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040f8:	d101      	bne.n	80040fe <LL_RCC_PLLSAI1_IsReady+0x18>
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b088      	sub	sp, #32
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004112:	2300      	movs	r3, #0
 8004114:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004116:	2300      	movs	r3, #0
 8004118:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004122:	2b00      	cmp	r3, #0
 8004124:	d034      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800412e:	d021      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004130:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004134:	d81b      	bhi.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004136:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800413a:	d01d      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800413c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004140:	d815      	bhi.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00b      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004146:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800414a:	d110      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800414c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800415a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800415c:	e00d      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3304      	adds	r3, #4
 8004162:	4618      	mov	r0, r3
 8004164:	f000 f947 	bl	80043f6 <RCCEx_PLLSAI1_ConfigNP>
 8004168:	4603      	mov	r3, r0
 800416a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800416c:	e005      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	77fb      	strb	r3, [r7, #31]
        break;
 8004172:	e002      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004174:	bf00      	nop
 8004176:	e000      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800417a:	7ffb      	ldrb	r3, [r7, #31]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d105      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff fee8 	bl	8003f5a <LL_RCC_SetSAIClockSource>
 800418a:	e001      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418c:	7ffb      	ldrb	r3, [r7, #31]
 800418e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004198:	2b00      	cmp	r3, #0
 800419a:	d046      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800419c:	f7ff ff56 	bl	800404c <LL_RCC_GetRTCClockSource>
 80041a0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d03c      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80041ac:	f7fe fc68 	bl	8002a80 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d105      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff ff30 	bl	8004020 <LL_RCC_SetRTCClockSource>
 80041c0:	e02e      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80041c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ca:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80041cc:	f7ff ff4b 	bl	8004066 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80041d0:	f7ff ff5a 	bl	8004088 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80041e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80041ec:	f7ff fdf0 	bl	8003dd0 <LL_RCC_LSE_IsEnabled>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d114      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041f6:	f7fc ff75 	bl	80010e4 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80041fc:	e00b      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041fe:	f7fc ff71 	bl	80010e4 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	f241 3288 	movw	r2, #5000	@ 0x1388
 800420c:	4293      	cmp	r3, r2
 800420e:	d902      	bls.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	77fb      	strb	r3, [r7, #31]
              break;
 8004214:	e004      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004216:	f7ff fded 	bl	8003df4 <LL_RCC_LSE_IsReady>
 800421a:	4603      	mov	r3, r0
 800421c:	2b01      	cmp	r3, #1
 800421e:	d1ee      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004220:	7ffb      	ldrb	r3, [r7, #31]
 8004222:	77bb      	strb	r3, [r7, #30]
 8004224:	e001      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004226:	7ffb      	ldrb	r3, [r7, #31]
 8004228:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d004      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff fe2a 	bl	8003e94 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d004      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff fe35 	bl	8003ec0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0310 	and.w	r3, r3, #16
 800425e:	2b00      	cmp	r3, #0
 8004260:	d004      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004266:	4618      	mov	r0, r3
 8004268:	f7ff fe5d 	bl	8003f26 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0320 	and.w	r3, r3, #32
 8004274:	2b00      	cmp	r3, #0
 8004276:	d004      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff fe52 	bl	8003f26 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b00      	cmp	r3, #0
 800428c:	d004      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff fe2a 	bl	8003eec <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d004      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff fe1f 	bl	8003eec <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d022      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff fe8d 	bl	8003fde <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042cc:	d107      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80042ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042dc:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042e6:	d10b      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3304      	adds	r3, #4
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 f8dd 	bl	80044ac <RCCEx_PLLSAI1_ConfigNQ>
 80042f2:	4603      	mov	r3, r0
 80042f4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80042f6:	7ffb      	ldrb	r3, [r7, #31]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80042fc:	7ffb      	ldrb	r3, [r7, #31]
 80042fe:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004308:	2b00      	cmp	r3, #0
 800430a:	d02b      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004314:	d008      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800431a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800431e:	d003      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004324:	2b00      	cmp	r3, #0
 8004326:	d105      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff fe2a 	bl	8003f86 <LL_RCC_SetRNGClockSource>
 8004332:	e00a      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004338:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	2000      	movs	r0, #0
 8004340:	f7ff fe21 	bl	8003f86 <LL_RCC_SetRNGClockSource>
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f7ff fe34 	bl	8003fb2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004352:	d107      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800435e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004362:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800436c:	2b00      	cmp	r3, #0
 800436e:	d022      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff fe3d 	bl	8003ff4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800437e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004382:	d107      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800438e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004392:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004398:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800439c:	d10b      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3304      	adds	r3, #4
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 f8dd 	bl	8004562 <RCCEx_PLLSAI1_ConfigNR>
 80043a8:	4603      	mov	r3, r0
 80043aa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80043ac:	7ffb      	ldrb	r3, [r7, #31]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80043b2:	7ffb      	ldrb	r3, [r7, #31]
 80043b4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d004      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff fd26 	bl	8003e18 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d009      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043dc:	4618      	mov	r0, r3
 80043de:	f7ff fd45 	bl	8003e6c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff fd2c 	bl	8003e44 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80043ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b084      	sub	sp, #16
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004402:	f7ff fe61 	bl	80040c8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004406:	f7fc fe6d 	bl	80010e4 <HAL_GetTick>
 800440a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800440c:	e009      	b.n	8004422 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800440e:	f7fc fe69 	bl	80010e4 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d902      	bls.n	8004422 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	73fb      	strb	r3, [r7, #15]
      break;
 8004420:	e004      	b.n	800442c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004422:	f7ff fe60 	bl	80040e6 <LL_RCC_PLLSAI1_IsReady>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1f0      	bne.n	800440e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d137      	bne.n	80044a2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	021b      	lsls	r3, r3, #8
 8004442:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004446:	4313      	orrs	r3, r2
 8004448:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800444a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800445c:	4313      	orrs	r3, r2
 800445e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004460:	f7ff fe23 	bl	80040aa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004464:	f7fc fe3e 	bl	80010e4 <HAL_GetTick>
 8004468:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800446a:	e009      	b.n	8004480 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800446c:	f7fc fe3a 	bl	80010e4 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d902      	bls.n	8004480 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	73fb      	strb	r3, [r7, #15]
        break;
 800447e:	e004      	b.n	800448a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004480:	f7ff fe31 	bl	80040e6 <LL_RCC_PLLSAI1_IsReady>
 8004484:	4603      	mov	r3, r0
 8004486:	2b01      	cmp	r3, #1
 8004488:	d1f0      	bne.n	800446c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800448a:	7bfb      	ldrb	r3, [r7, #15]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d108      	bne.n	80044a2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004494:	691a      	ldr	r2, [r3, #16]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800449e:	4313      	orrs	r3, r2
 80044a0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80044b8:	f7ff fe06 	bl	80040c8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80044bc:	f7fc fe12 	bl	80010e4 <HAL_GetTick>
 80044c0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80044c2:	e009      	b.n	80044d8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044c4:	f7fc fe0e 	bl	80010e4 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d902      	bls.n	80044d8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	73fb      	strb	r3, [r7, #15]
      break;
 80044d6:	e004      	b.n	80044e2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80044d8:	f7ff fe05 	bl	80040e6 <LL_RCC_PLLSAI1_IsReady>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1f0      	bne.n	80044c4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d137      	bne.n	8004558 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80044e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	021b      	lsls	r3, r3, #8
 80044f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80044fc:	4313      	orrs	r3, r2
 80044fe:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004512:	4313      	orrs	r3, r2
 8004514:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004516:	f7ff fdc8 	bl	80040aa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800451a:	f7fc fde3 	bl	80010e4 <HAL_GetTick>
 800451e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004520:	e009      	b.n	8004536 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004522:	f7fc fddf 	bl	80010e4 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d902      	bls.n	8004536 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	73fb      	strb	r3, [r7, #15]
        break;
 8004534:	e004      	b.n	8004540 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004536:	f7ff fdd6 	bl	80040e6 <LL_RCC_PLLSAI1_IsReady>
 800453a:	4603      	mov	r3, r0
 800453c:	2b01      	cmp	r3, #1
 800453e:	d1f0      	bne.n	8004522 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004540:	7bfb      	ldrb	r3, [r7, #15]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d108      	bne.n	8004558 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004554:	4313      	orrs	r3, r2
 8004556:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004558:	7bfb      	ldrb	r3, [r7, #15]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800456e:	f7ff fdab 	bl	80040c8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004572:	f7fc fdb7 	bl	80010e4 <HAL_GetTick>
 8004576:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004578:	e009      	b.n	800458e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800457a:	f7fc fdb3 	bl	80010e4 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d902      	bls.n	800458e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	73fb      	strb	r3, [r7, #15]
      break;
 800458c:	e004      	b.n	8004598 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800458e:	f7ff fdaa 	bl	80040e6 <LL_RCC_PLLSAI1_IsReady>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1f0      	bne.n	800457a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004598:	7bfb      	ldrb	r3, [r7, #15]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d137      	bne.n	800460e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800459e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	021b      	lsls	r3, r3, #8
 80045ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045b2:	4313      	orrs	r3, r2
 80045b4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80045b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045c8:	4313      	orrs	r3, r2
 80045ca:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80045cc:	f7ff fd6d 	bl	80040aa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d0:	f7fc fd88 	bl	80010e4 <HAL_GetTick>
 80045d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80045d6:	e009      	b.n	80045ec <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045d8:	f7fc fd84 	bl	80010e4 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d902      	bls.n	80045ec <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	73fb      	strb	r3, [r7, #15]
        break;
 80045ea:	e004      	b.n	80045f6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80045ec:	f7ff fd7b 	bl	80040e6 <LL_RCC_PLLSAI1_IsReady>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d1f0      	bne.n	80045d8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d108      	bne.n	800460e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80045fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800460a:	4313      	orrs	r3, r2
 800460c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800460e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <LL_RCC_GetUSARTClockSource>:
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004620:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004624:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4013      	ands	r3, r2
}
 800462c:	4618      	mov	r0, r3
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <LL_RCC_GetLPUARTClockSource>:
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004640:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004644:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4013      	ands	r3, r2
}
 800464c:	4618      	mov	r0, r3
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e042      	b.n	80046f0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004670:	2b00      	cmp	r3, #0
 8004672:	d106      	bne.n	8004682 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f83b 	bl	80046f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2224      	movs	r2, #36	@ 0x24
 8004686:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0201 	bic.w	r2, r2, #1
 8004698:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fae8 	bl	8004c78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f8bd 	bl	8004828 <UART_SetConfig>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d101      	bne.n	80046b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e01b      	b.n	80046f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0201 	orr.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 fb67 	bl	8004dbc <UART_CheckIdleState>
 80046ee:	4603      	mov	r3, r0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08a      	sub	sp, #40	@ 0x28
 8004710:	af02      	add	r7, sp, #8
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004722:	2b20      	cmp	r3, #32
 8004724:	d17b      	bne.n	800481e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <HAL_UART_Transmit+0x26>
 800472c:	88fb      	ldrh	r3, [r7, #6]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e074      	b.n	8004820 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2221      	movs	r2, #33	@ 0x21
 8004742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004746:	f7fc fccd 	bl	80010e4 <HAL_GetTick>
 800474a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	88fa      	ldrh	r2, [r7, #6]
 8004750:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	88fa      	ldrh	r2, [r7, #6]
 8004758:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004764:	d108      	bne.n	8004778 <HAL_UART_Transmit+0x6c>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d104      	bne.n	8004778 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800476e:	2300      	movs	r3, #0
 8004770:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	61bb      	str	r3, [r7, #24]
 8004776:	e003      	b.n	8004780 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800477c:	2300      	movs	r3, #0
 800477e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004780:	e030      	b.n	80047e4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2200      	movs	r2, #0
 800478a:	2180      	movs	r1, #128	@ 0x80
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 fbbf 	bl	8004f10 <UART_WaitOnFlagUntilTimeout>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e03d      	b.n	8004820 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10b      	bne.n	80047c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	461a      	mov	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	3302      	adds	r3, #2
 80047be:	61bb      	str	r3, [r7, #24]
 80047c0:	e007      	b.n	80047d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	781a      	ldrb	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	3301      	adds	r3, #1
 80047d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80047d8:	b29b      	uxth	r3, r3
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1c8      	bne.n	8004782 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2200      	movs	r2, #0
 80047f8:	2140      	movs	r1, #64	@ 0x40
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 fb88 	bl	8004f10 <UART_WaitOnFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d005      	beq.n	8004812 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2220      	movs	r2, #32
 800480a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e006      	b.n	8004820 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2220      	movs	r2, #32
 8004816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	e000      	b.n	8004820 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800481e:	2302      	movs	r3, #2
  }
}
 8004820:	4618      	mov	r0, r3
 8004822:	3720      	adds	r7, #32
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800482c:	b08c      	sub	sp, #48	@ 0x30
 800482e:	af00      	add	r7, sp, #0
 8004830:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	431a      	orrs	r2, r3
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	431a      	orrs	r2, r3
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	4313      	orrs	r3, r2
 800484e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	4baf      	ldr	r3, [pc, #700]	@ (8004b14 <UART_SetConfig+0x2ec>)
 8004858:	4013      	ands	r3, r2
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	6812      	ldr	r2, [r2, #0]
 800485e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004860:	430b      	orrs	r3, r1
 8004862:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4aa4      	ldr	r2, [pc, #656]	@ (8004b18 <UART_SetConfig+0x2f0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d004      	beq.n	8004894 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004890:	4313      	orrs	r3, r2
 8004892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800489e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	6812      	ldr	r2, [r2, #0]
 80048a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048a8:	430b      	orrs	r3, r1
 80048aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b2:	f023 010f 	bic.w	r1, r3, #15
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a95      	ldr	r2, [pc, #596]	@ (8004b1c <UART_SetConfig+0x2f4>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d125      	bne.n	8004918 <UART_SetConfig+0xf0>
 80048cc:	2003      	movs	r0, #3
 80048ce:	f7ff fea3 	bl	8004618 <LL_RCC_GetUSARTClockSource>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b03      	cmp	r3, #3
 80048d6:	d81b      	bhi.n	8004910 <UART_SetConfig+0xe8>
 80048d8:	a201      	add	r2, pc, #4	@ (adr r2, 80048e0 <UART_SetConfig+0xb8>)
 80048da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048de:	bf00      	nop
 80048e0:	080048f1 	.word	0x080048f1
 80048e4:	08004901 	.word	0x08004901
 80048e8:	080048f9 	.word	0x080048f9
 80048ec:	08004909 	.word	0x08004909
 80048f0:	2301      	movs	r3, #1
 80048f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048f6:	e042      	b.n	800497e <UART_SetConfig+0x156>
 80048f8:	2302      	movs	r3, #2
 80048fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048fe:	e03e      	b.n	800497e <UART_SetConfig+0x156>
 8004900:	2304      	movs	r3, #4
 8004902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004906:	e03a      	b.n	800497e <UART_SetConfig+0x156>
 8004908:	2308      	movs	r3, #8
 800490a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800490e:	e036      	b.n	800497e <UART_SetConfig+0x156>
 8004910:	2310      	movs	r3, #16
 8004912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004916:	e032      	b.n	800497e <UART_SetConfig+0x156>
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a7e      	ldr	r2, [pc, #504]	@ (8004b18 <UART_SetConfig+0x2f0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d12a      	bne.n	8004978 <UART_SetConfig+0x150>
 8004922:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004926:	f7ff fe87 	bl	8004638 <LL_RCC_GetLPUARTClockSource>
 800492a:	4603      	mov	r3, r0
 800492c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004930:	d01a      	beq.n	8004968 <UART_SetConfig+0x140>
 8004932:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004936:	d81b      	bhi.n	8004970 <UART_SetConfig+0x148>
 8004938:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800493c:	d00c      	beq.n	8004958 <UART_SetConfig+0x130>
 800493e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004942:	d815      	bhi.n	8004970 <UART_SetConfig+0x148>
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <UART_SetConfig+0x128>
 8004948:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800494c:	d008      	beq.n	8004960 <UART_SetConfig+0x138>
 800494e:	e00f      	b.n	8004970 <UART_SetConfig+0x148>
 8004950:	2300      	movs	r3, #0
 8004952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004956:	e012      	b.n	800497e <UART_SetConfig+0x156>
 8004958:	2302      	movs	r3, #2
 800495a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800495e:	e00e      	b.n	800497e <UART_SetConfig+0x156>
 8004960:	2304      	movs	r3, #4
 8004962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004966:	e00a      	b.n	800497e <UART_SetConfig+0x156>
 8004968:	2308      	movs	r3, #8
 800496a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800496e:	e006      	b.n	800497e <UART_SetConfig+0x156>
 8004970:	2310      	movs	r3, #16
 8004972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004976:	e002      	b.n	800497e <UART_SetConfig+0x156>
 8004978:	2310      	movs	r3, #16
 800497a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a65      	ldr	r2, [pc, #404]	@ (8004b18 <UART_SetConfig+0x2f0>)
 8004984:	4293      	cmp	r3, r2
 8004986:	f040 8097 	bne.w	8004ab8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800498a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800498e:	2b08      	cmp	r3, #8
 8004990:	d823      	bhi.n	80049da <UART_SetConfig+0x1b2>
 8004992:	a201      	add	r2, pc, #4	@ (adr r2, 8004998 <UART_SetConfig+0x170>)
 8004994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004998:	080049bd 	.word	0x080049bd
 800499c:	080049db 	.word	0x080049db
 80049a0:	080049c5 	.word	0x080049c5
 80049a4:	080049db 	.word	0x080049db
 80049a8:	080049cb 	.word	0x080049cb
 80049ac:	080049db 	.word	0x080049db
 80049b0:	080049db 	.word	0x080049db
 80049b4:	080049db 	.word	0x080049db
 80049b8:	080049d3 	.word	0x080049d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049bc:	f7ff f928 	bl	8003c10 <HAL_RCC_GetPCLK1Freq>
 80049c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049c2:	e010      	b.n	80049e6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049c4:	4b56      	ldr	r3, [pc, #344]	@ (8004b20 <UART_SetConfig+0x2f8>)
 80049c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049c8:	e00d      	b.n	80049e6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ca:	f7ff f8a1 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 80049ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049d0:	e009      	b.n	80049e6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049d8:	e005      	b.n	80049e6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80049e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 812b 	beq.w	8004c44 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f2:	4a4c      	ldr	r2, [pc, #304]	@ (8004b24 <UART_SetConfig+0x2fc>)
 80049f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049f8:	461a      	mov	r2, r3
 80049fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	4413      	add	r3, r2
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d305      	bcc.n	8004a1e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d903      	bls.n	8004a26 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004a24:	e10e      	b.n	8004c44 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a28:	2200      	movs	r2, #0
 8004a2a:	60bb      	str	r3, [r7, #8]
 8004a2c:	60fa      	str	r2, [r7, #12]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a32:	4a3c      	ldr	r2, [pc, #240]	@ (8004b24 <UART_SetConfig+0x2fc>)
 8004a34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	603b      	str	r3, [r7, #0]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a48:	f7fb fbea 	bl	8000220 <__aeabi_uldivmod>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4610      	mov	r0, r2
 8004a52:	4619      	mov	r1, r3
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	f04f 0300 	mov.w	r3, #0
 8004a5c:	020b      	lsls	r3, r1, #8
 8004a5e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a62:	0202      	lsls	r2, r0, #8
 8004a64:	6979      	ldr	r1, [r7, #20]
 8004a66:	6849      	ldr	r1, [r1, #4]
 8004a68:	0849      	lsrs	r1, r1, #1
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	460c      	mov	r4, r1
 8004a6e:	4605      	mov	r5, r0
 8004a70:	eb12 0804 	adds.w	r8, r2, r4
 8004a74:	eb43 0905 	adc.w	r9, r3, r5
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	469a      	mov	sl, r3
 8004a80:	4693      	mov	fp, r2
 8004a82:	4652      	mov	r2, sl
 8004a84:	465b      	mov	r3, fp
 8004a86:	4640      	mov	r0, r8
 8004a88:	4649      	mov	r1, r9
 8004a8a:	f7fb fbc9 	bl	8000220 <__aeabi_uldivmod>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4613      	mov	r3, r2
 8004a94:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a9c:	d308      	bcc.n	8004ab0 <UART_SetConfig+0x288>
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004aa4:	d204      	bcs.n	8004ab0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6a3a      	ldr	r2, [r7, #32]
 8004aac:	60da      	str	r2, [r3, #12]
 8004aae:	e0c9      	b.n	8004c44 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004ab6:	e0c5      	b.n	8004c44 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ac0:	d16d      	bne.n	8004b9e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004ac2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	2b07      	cmp	r3, #7
 8004aca:	d82d      	bhi.n	8004b28 <UART_SetConfig+0x300>
 8004acc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad4 <UART_SetConfig+0x2ac>)
 8004ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad2:	bf00      	nop
 8004ad4:	08004af5 	.word	0x08004af5
 8004ad8:	08004afd 	.word	0x08004afd
 8004adc:	08004b29 	.word	0x08004b29
 8004ae0:	08004b03 	.word	0x08004b03
 8004ae4:	08004b29 	.word	0x08004b29
 8004ae8:	08004b29 	.word	0x08004b29
 8004aec:	08004b29 	.word	0x08004b29
 8004af0:	08004b0b 	.word	0x08004b0b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004af4:	f7ff f8a2 	bl	8003c3c <HAL_RCC_GetPCLK2Freq>
 8004af8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004afa:	e01b      	b.n	8004b34 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004afc:	4b08      	ldr	r3, [pc, #32]	@ (8004b20 <UART_SetConfig+0x2f8>)
 8004afe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b00:	e018      	b.n	8004b34 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b02:	f7ff f805 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 8004b06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b08:	e014      	b.n	8004b34 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b10:	e010      	b.n	8004b34 <UART_SetConfig+0x30c>
 8004b12:	bf00      	nop
 8004b14:	cfff69f3 	.word	0xcfff69f3
 8004b18:	40008000 	.word	0x40008000
 8004b1c:	40013800 	.word	0x40013800
 8004b20:	00f42400 	.word	0x00f42400
 8004b24:	08006030 	.word	0x08006030
      default:
        pclk = 0U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004b32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 8084 	beq.w	8004c44 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b40:	4a4b      	ldr	r2, [pc, #300]	@ (8004c70 <UART_SetConfig+0x448>)
 8004b42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b46:	461a      	mov	r2, r3
 8004b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b4e:	005a      	lsls	r2, r3, #1
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	085b      	lsrs	r3, r3, #1
 8004b56:	441a      	add	r2, r3
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b60:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	2b0f      	cmp	r3, #15
 8004b66:	d916      	bls.n	8004b96 <UART_SetConfig+0x36e>
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b6e:	d212      	bcs.n	8004b96 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	f023 030f 	bic.w	r3, r3, #15
 8004b78:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	085b      	lsrs	r3, r3, #1
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	f003 0307 	and.w	r3, r3, #7
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	8bfb      	ldrh	r3, [r7, #30]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	8bfa      	ldrh	r2, [r7, #30]
 8004b92:	60da      	str	r2, [r3, #12]
 8004b94:	e056      	b.n	8004c44 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b9c:	e052      	b.n	8004c44 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b9e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	2b07      	cmp	r3, #7
 8004ba6:	d822      	bhi.n	8004bee <UART_SetConfig+0x3c6>
 8004ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb0 <UART_SetConfig+0x388>)
 8004baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bae:	bf00      	nop
 8004bb0:	08004bd1 	.word	0x08004bd1
 8004bb4:	08004bd9 	.word	0x08004bd9
 8004bb8:	08004bef 	.word	0x08004bef
 8004bbc:	08004bdf 	.word	0x08004bdf
 8004bc0:	08004bef 	.word	0x08004bef
 8004bc4:	08004bef 	.word	0x08004bef
 8004bc8:	08004bef 	.word	0x08004bef
 8004bcc:	08004be7 	.word	0x08004be7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bd0:	f7ff f834 	bl	8003c3c <HAL_RCC_GetPCLK2Freq>
 8004bd4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bd6:	e010      	b.n	8004bfa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bd8:	4b26      	ldr	r3, [pc, #152]	@ (8004c74 <UART_SetConfig+0x44c>)
 8004bda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bdc:	e00d      	b.n	8004bfa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bde:	f7fe ff97 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 8004be2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004be4:	e009      	b.n	8004bfa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004be6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bec:	e005      	b.n	8004bfa <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004bf8:	bf00      	nop
    }

    if (pclk != 0U)
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d021      	beq.n	8004c44 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c04:	4a1a      	ldr	r2, [pc, #104]	@ (8004c70 <UART_SetConfig+0x448>)
 8004c06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	085b      	lsrs	r3, r3, #1
 8004c18:	441a      	add	r2, r3
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	2b0f      	cmp	r3, #15
 8004c28:	d909      	bls.n	8004c3e <UART_SetConfig+0x416>
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c30:	d205      	bcs.n	8004c3e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c32:	6a3b      	ldr	r3, [r7, #32]
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60da      	str	r2, [r3, #12]
 8004c3c:	e002      	b.n	8004c44 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	2200      	movs	r2, #0
 8004c58:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004c60:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3730      	adds	r7, #48	@ 0x30
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c6e:	bf00      	nop
 8004c70:	08006030 	.word	0x08006030
 8004c74:	00f42400 	.word	0x00f42400

08004c78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cea:	f003 0304 	and.w	r3, r3, #4
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0c:	f003 0310 	and.w	r3, r3, #16
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2e:	f003 0320 	and.w	r3, r3, #32
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d01a      	beq.n	8004d8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d76:	d10a      	bne.n	8004d8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	605a      	str	r2, [r3, #4]
  }
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b098      	sub	sp, #96	@ 0x60
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dcc:	f7fc f98a 	bl	80010e4 <HAL_GetTick>
 8004dd0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0308 	and.w	r3, r3, #8
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d12f      	bne.n	8004e40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004de0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004de8:	2200      	movs	r2, #0
 8004dea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f88e 	bl	8004f10 <UART_WaitOnFlagUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d022      	beq.n	8004e40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e02:	e853 3f00 	ldrex	r3, [r3]
 8004e06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e18:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e1a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e20:	e841 2300 	strex	r3, r2, [r1]
 8004e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e6      	bne.n	8004dfa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e063      	b.n	8004f08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d149      	bne.n	8004ee2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e4e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e56:	2200      	movs	r2, #0
 8004e58:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f857 	bl	8004f10 <UART_WaitOnFlagUntilTimeout>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d03c      	beq.n	8004ee2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e70:	e853 3f00 	ldrex	r3, [r3]
 8004e74:	623b      	str	r3, [r7, #32]
   return(result);
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e86:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e88:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e8e:	e841 2300 	strex	r3, r2, [r1]
 8004e92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1e6      	bne.n	8004e68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3308      	adds	r3, #8
 8004ea0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	e853 3f00 	ldrex	r3, [r3]
 8004ea8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f023 0301 	bic.w	r3, r3, #1
 8004eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	3308      	adds	r3, #8
 8004eb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004eba:	61fa      	str	r2, [r7, #28]
 8004ebc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebe:	69b9      	ldr	r1, [r7, #24]
 8004ec0:	69fa      	ldr	r2, [r7, #28]
 8004ec2:	e841 2300 	strex	r3, r2, [r1]
 8004ec6:	617b      	str	r3, [r7, #20]
   return(result);
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1e5      	bne.n	8004e9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e012      	b.n	8004f08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3758      	adds	r7, #88	@ 0x58
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	603b      	str	r3, [r7, #0]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f20:	e04f      	b.n	8004fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f28:	d04b      	beq.n	8004fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2a:	f7fc f8db 	bl	80010e4 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d302      	bcc.n	8004f40 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e04e      	b.n	8004fe2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0304 	and.w	r3, r3, #4
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d037      	beq.n	8004fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2b80      	cmp	r3, #128	@ 0x80
 8004f56:	d034      	beq.n	8004fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	2b40      	cmp	r3, #64	@ 0x40
 8004f5c:	d031      	beq.n	8004fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d110      	bne.n	8004f8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2208      	movs	r2, #8
 8004f72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 f838 	bl	8004fea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2208      	movs	r2, #8
 8004f7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e029      	b.n	8004fe2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f9c:	d111      	bne.n	8004fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004fa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 f81e 	bl	8004fea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e00f      	b.n	8004fe2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69da      	ldr	r2, [r3, #28]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	bf0c      	ite	eq
 8004fd2:	2301      	moveq	r3, #1
 8004fd4:	2300      	movne	r3, #0
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	461a      	mov	r2, r3
 8004fda:	79fb      	ldrb	r3, [r7, #7]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d0a0      	beq.n	8004f22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b095      	sub	sp, #84	@ 0x54
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ffa:	e853 3f00 	ldrex	r3, [r3]
 8004ffe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005002:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005006:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	461a      	mov	r2, r3
 800500e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005010:	643b      	str	r3, [r7, #64]	@ 0x40
 8005012:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005014:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005016:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005018:	e841 2300 	strex	r3, r2, [r1]
 800501c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800501e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1e6      	bne.n	8004ff2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3308      	adds	r3, #8
 800502a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	e853 3f00 	ldrex	r3, [r3]
 8005032:	61fb      	str	r3, [r7, #28]
   return(result);
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800503a:	f023 0301 	bic.w	r3, r3, #1
 800503e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3308      	adds	r3, #8
 8005046:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005048:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800504a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800504e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005050:	e841 2300 	strex	r3, r2, [r1]
 8005054:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1e3      	bne.n	8005024 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005060:	2b01      	cmp	r3, #1
 8005062:	d118      	bne.n	8005096 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	e853 3f00 	ldrex	r3, [r3]
 8005070:	60bb      	str	r3, [r7, #8]
   return(result);
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f023 0310 	bic.w	r3, r3, #16
 8005078:	647b      	str	r3, [r7, #68]	@ 0x44
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005082:	61bb      	str	r3, [r7, #24]
 8005084:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005086:	6979      	ldr	r1, [r7, #20]
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	e841 2300 	strex	r3, r2, [r1]
 800508e:	613b      	str	r3, [r7, #16]
   return(result);
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1e6      	bne.n	8005064 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2220      	movs	r2, #32
 800509a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80050aa:	bf00      	nop
 80050ac:	3754      	adds	r7, #84	@ 0x54
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
	...

080050b8 <std>:
 80050b8:	2300      	movs	r3, #0
 80050ba:	b510      	push	{r4, lr}
 80050bc:	4604      	mov	r4, r0
 80050be:	e9c0 3300 	strd	r3, r3, [r0]
 80050c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050c6:	6083      	str	r3, [r0, #8]
 80050c8:	8181      	strh	r1, [r0, #12]
 80050ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80050cc:	81c2      	strh	r2, [r0, #14]
 80050ce:	6183      	str	r3, [r0, #24]
 80050d0:	4619      	mov	r1, r3
 80050d2:	2208      	movs	r2, #8
 80050d4:	305c      	adds	r0, #92	@ 0x5c
 80050d6:	f000 f906 	bl	80052e6 <memset>
 80050da:	4b0d      	ldr	r3, [pc, #52]	@ (8005110 <std+0x58>)
 80050dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80050de:	4b0d      	ldr	r3, [pc, #52]	@ (8005114 <std+0x5c>)
 80050e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80050e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005118 <std+0x60>)
 80050e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80050e6:	4b0d      	ldr	r3, [pc, #52]	@ (800511c <std+0x64>)
 80050e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80050ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005120 <std+0x68>)
 80050ec:	6224      	str	r4, [r4, #32]
 80050ee:	429c      	cmp	r4, r3
 80050f0:	d006      	beq.n	8005100 <std+0x48>
 80050f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80050f6:	4294      	cmp	r4, r2
 80050f8:	d002      	beq.n	8005100 <std+0x48>
 80050fa:	33d0      	adds	r3, #208	@ 0xd0
 80050fc:	429c      	cmp	r4, r3
 80050fe:	d105      	bne.n	800510c <std+0x54>
 8005100:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005108:	f000 b966 	b.w	80053d8 <__retarget_lock_init_recursive>
 800510c:	bd10      	pop	{r4, pc}
 800510e:	bf00      	nop
 8005110:	08005261 	.word	0x08005261
 8005114:	08005283 	.word	0x08005283
 8005118:	080052bb 	.word	0x080052bb
 800511c:	080052df 	.word	0x080052df
 8005120:	200001c0 	.word	0x200001c0

08005124 <stdio_exit_handler>:
 8005124:	4a02      	ldr	r2, [pc, #8]	@ (8005130 <stdio_exit_handler+0xc>)
 8005126:	4903      	ldr	r1, [pc, #12]	@ (8005134 <stdio_exit_handler+0x10>)
 8005128:	4803      	ldr	r0, [pc, #12]	@ (8005138 <stdio_exit_handler+0x14>)
 800512a:	f000 b869 	b.w	8005200 <_fwalk_sglue>
 800512e:	bf00      	nop
 8005130:	20000034 	.word	0x20000034
 8005134:	08005c75 	.word	0x08005c75
 8005138:	20000044 	.word	0x20000044

0800513c <cleanup_stdio>:
 800513c:	6841      	ldr	r1, [r0, #4]
 800513e:	4b0c      	ldr	r3, [pc, #48]	@ (8005170 <cleanup_stdio+0x34>)
 8005140:	4299      	cmp	r1, r3
 8005142:	b510      	push	{r4, lr}
 8005144:	4604      	mov	r4, r0
 8005146:	d001      	beq.n	800514c <cleanup_stdio+0x10>
 8005148:	f000 fd94 	bl	8005c74 <_fflush_r>
 800514c:	68a1      	ldr	r1, [r4, #8]
 800514e:	4b09      	ldr	r3, [pc, #36]	@ (8005174 <cleanup_stdio+0x38>)
 8005150:	4299      	cmp	r1, r3
 8005152:	d002      	beq.n	800515a <cleanup_stdio+0x1e>
 8005154:	4620      	mov	r0, r4
 8005156:	f000 fd8d 	bl	8005c74 <_fflush_r>
 800515a:	68e1      	ldr	r1, [r4, #12]
 800515c:	4b06      	ldr	r3, [pc, #24]	@ (8005178 <cleanup_stdio+0x3c>)
 800515e:	4299      	cmp	r1, r3
 8005160:	d004      	beq.n	800516c <cleanup_stdio+0x30>
 8005162:	4620      	mov	r0, r4
 8005164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005168:	f000 bd84 	b.w	8005c74 <_fflush_r>
 800516c:	bd10      	pop	{r4, pc}
 800516e:	bf00      	nop
 8005170:	200001c0 	.word	0x200001c0
 8005174:	20000228 	.word	0x20000228
 8005178:	20000290 	.word	0x20000290

0800517c <global_stdio_init.part.0>:
 800517c:	b510      	push	{r4, lr}
 800517e:	4b0b      	ldr	r3, [pc, #44]	@ (80051ac <global_stdio_init.part.0+0x30>)
 8005180:	4c0b      	ldr	r4, [pc, #44]	@ (80051b0 <global_stdio_init.part.0+0x34>)
 8005182:	4a0c      	ldr	r2, [pc, #48]	@ (80051b4 <global_stdio_init.part.0+0x38>)
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	4620      	mov	r0, r4
 8005188:	2200      	movs	r2, #0
 800518a:	2104      	movs	r1, #4
 800518c:	f7ff ff94 	bl	80050b8 <std>
 8005190:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005194:	2201      	movs	r2, #1
 8005196:	2109      	movs	r1, #9
 8005198:	f7ff ff8e 	bl	80050b8 <std>
 800519c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80051a0:	2202      	movs	r2, #2
 80051a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051a6:	2112      	movs	r1, #18
 80051a8:	f7ff bf86 	b.w	80050b8 <std>
 80051ac:	200002f8 	.word	0x200002f8
 80051b0:	200001c0 	.word	0x200001c0
 80051b4:	08005125 	.word	0x08005125

080051b8 <__sfp_lock_acquire>:
 80051b8:	4801      	ldr	r0, [pc, #4]	@ (80051c0 <__sfp_lock_acquire+0x8>)
 80051ba:	f000 b90e 	b.w	80053da <__retarget_lock_acquire_recursive>
 80051be:	bf00      	nop
 80051c0:	20000301 	.word	0x20000301

080051c4 <__sfp_lock_release>:
 80051c4:	4801      	ldr	r0, [pc, #4]	@ (80051cc <__sfp_lock_release+0x8>)
 80051c6:	f000 b909 	b.w	80053dc <__retarget_lock_release_recursive>
 80051ca:	bf00      	nop
 80051cc:	20000301 	.word	0x20000301

080051d0 <__sinit>:
 80051d0:	b510      	push	{r4, lr}
 80051d2:	4604      	mov	r4, r0
 80051d4:	f7ff fff0 	bl	80051b8 <__sfp_lock_acquire>
 80051d8:	6a23      	ldr	r3, [r4, #32]
 80051da:	b11b      	cbz	r3, 80051e4 <__sinit+0x14>
 80051dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051e0:	f7ff bff0 	b.w	80051c4 <__sfp_lock_release>
 80051e4:	4b04      	ldr	r3, [pc, #16]	@ (80051f8 <__sinit+0x28>)
 80051e6:	6223      	str	r3, [r4, #32]
 80051e8:	4b04      	ldr	r3, [pc, #16]	@ (80051fc <__sinit+0x2c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1f5      	bne.n	80051dc <__sinit+0xc>
 80051f0:	f7ff ffc4 	bl	800517c <global_stdio_init.part.0>
 80051f4:	e7f2      	b.n	80051dc <__sinit+0xc>
 80051f6:	bf00      	nop
 80051f8:	0800513d 	.word	0x0800513d
 80051fc:	200002f8 	.word	0x200002f8

08005200 <_fwalk_sglue>:
 8005200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005204:	4607      	mov	r7, r0
 8005206:	4688      	mov	r8, r1
 8005208:	4614      	mov	r4, r2
 800520a:	2600      	movs	r6, #0
 800520c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005210:	f1b9 0901 	subs.w	r9, r9, #1
 8005214:	d505      	bpl.n	8005222 <_fwalk_sglue+0x22>
 8005216:	6824      	ldr	r4, [r4, #0]
 8005218:	2c00      	cmp	r4, #0
 800521a:	d1f7      	bne.n	800520c <_fwalk_sglue+0xc>
 800521c:	4630      	mov	r0, r6
 800521e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005222:	89ab      	ldrh	r3, [r5, #12]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d907      	bls.n	8005238 <_fwalk_sglue+0x38>
 8005228:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800522c:	3301      	adds	r3, #1
 800522e:	d003      	beq.n	8005238 <_fwalk_sglue+0x38>
 8005230:	4629      	mov	r1, r5
 8005232:	4638      	mov	r0, r7
 8005234:	47c0      	blx	r8
 8005236:	4306      	orrs	r6, r0
 8005238:	3568      	adds	r5, #104	@ 0x68
 800523a:	e7e9      	b.n	8005210 <_fwalk_sglue+0x10>

0800523c <iprintf>:
 800523c:	b40f      	push	{r0, r1, r2, r3}
 800523e:	b507      	push	{r0, r1, r2, lr}
 8005240:	4906      	ldr	r1, [pc, #24]	@ (800525c <iprintf+0x20>)
 8005242:	ab04      	add	r3, sp, #16
 8005244:	6808      	ldr	r0, [r1, #0]
 8005246:	f853 2b04 	ldr.w	r2, [r3], #4
 800524a:	6881      	ldr	r1, [r0, #8]
 800524c:	9301      	str	r3, [sp, #4]
 800524e:	f000 f9e9 	bl	8005624 <_vfiprintf_r>
 8005252:	b003      	add	sp, #12
 8005254:	f85d eb04 	ldr.w	lr, [sp], #4
 8005258:	b004      	add	sp, #16
 800525a:	4770      	bx	lr
 800525c:	20000040 	.word	0x20000040

08005260 <__sread>:
 8005260:	b510      	push	{r4, lr}
 8005262:	460c      	mov	r4, r1
 8005264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005268:	f000 f868 	bl	800533c <_read_r>
 800526c:	2800      	cmp	r0, #0
 800526e:	bfab      	itete	ge
 8005270:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005272:	89a3      	ldrhlt	r3, [r4, #12]
 8005274:	181b      	addge	r3, r3, r0
 8005276:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800527a:	bfac      	ite	ge
 800527c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800527e:	81a3      	strhlt	r3, [r4, #12]
 8005280:	bd10      	pop	{r4, pc}

08005282 <__swrite>:
 8005282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005286:	461f      	mov	r7, r3
 8005288:	898b      	ldrh	r3, [r1, #12]
 800528a:	05db      	lsls	r3, r3, #23
 800528c:	4605      	mov	r5, r0
 800528e:	460c      	mov	r4, r1
 8005290:	4616      	mov	r6, r2
 8005292:	d505      	bpl.n	80052a0 <__swrite+0x1e>
 8005294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005298:	2302      	movs	r3, #2
 800529a:	2200      	movs	r2, #0
 800529c:	f000 f83c 	bl	8005318 <_lseek_r>
 80052a0:	89a3      	ldrh	r3, [r4, #12]
 80052a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052aa:	81a3      	strh	r3, [r4, #12]
 80052ac:	4632      	mov	r2, r6
 80052ae:	463b      	mov	r3, r7
 80052b0:	4628      	mov	r0, r5
 80052b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052b6:	f000 b853 	b.w	8005360 <_write_r>

080052ba <__sseek>:
 80052ba:	b510      	push	{r4, lr}
 80052bc:	460c      	mov	r4, r1
 80052be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c2:	f000 f829 	bl	8005318 <_lseek_r>
 80052c6:	1c43      	adds	r3, r0, #1
 80052c8:	89a3      	ldrh	r3, [r4, #12]
 80052ca:	bf15      	itete	ne
 80052cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80052ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80052d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80052d6:	81a3      	strheq	r3, [r4, #12]
 80052d8:	bf18      	it	ne
 80052da:	81a3      	strhne	r3, [r4, #12]
 80052dc:	bd10      	pop	{r4, pc}

080052de <__sclose>:
 80052de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e2:	f000 b809 	b.w	80052f8 <_close_r>

080052e6 <memset>:
 80052e6:	4402      	add	r2, r0
 80052e8:	4603      	mov	r3, r0
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d100      	bne.n	80052f0 <memset+0xa>
 80052ee:	4770      	bx	lr
 80052f0:	f803 1b01 	strb.w	r1, [r3], #1
 80052f4:	e7f9      	b.n	80052ea <memset+0x4>
	...

080052f8 <_close_r>:
 80052f8:	b538      	push	{r3, r4, r5, lr}
 80052fa:	4d06      	ldr	r5, [pc, #24]	@ (8005314 <_close_r+0x1c>)
 80052fc:	2300      	movs	r3, #0
 80052fe:	4604      	mov	r4, r0
 8005300:	4608      	mov	r0, r1
 8005302:	602b      	str	r3, [r5, #0]
 8005304:	f7fb fbcc 	bl	8000aa0 <_close>
 8005308:	1c43      	adds	r3, r0, #1
 800530a:	d102      	bne.n	8005312 <_close_r+0x1a>
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	b103      	cbz	r3, 8005312 <_close_r+0x1a>
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	bd38      	pop	{r3, r4, r5, pc}
 8005314:	200002fc 	.word	0x200002fc

08005318 <_lseek_r>:
 8005318:	b538      	push	{r3, r4, r5, lr}
 800531a:	4d07      	ldr	r5, [pc, #28]	@ (8005338 <_lseek_r+0x20>)
 800531c:	4604      	mov	r4, r0
 800531e:	4608      	mov	r0, r1
 8005320:	4611      	mov	r1, r2
 8005322:	2200      	movs	r2, #0
 8005324:	602a      	str	r2, [r5, #0]
 8005326:	461a      	mov	r2, r3
 8005328:	f7fb fbe1 	bl	8000aee <_lseek>
 800532c:	1c43      	adds	r3, r0, #1
 800532e:	d102      	bne.n	8005336 <_lseek_r+0x1e>
 8005330:	682b      	ldr	r3, [r5, #0]
 8005332:	b103      	cbz	r3, 8005336 <_lseek_r+0x1e>
 8005334:	6023      	str	r3, [r4, #0]
 8005336:	bd38      	pop	{r3, r4, r5, pc}
 8005338:	200002fc 	.word	0x200002fc

0800533c <_read_r>:
 800533c:	b538      	push	{r3, r4, r5, lr}
 800533e:	4d07      	ldr	r5, [pc, #28]	@ (800535c <_read_r+0x20>)
 8005340:	4604      	mov	r4, r0
 8005342:	4608      	mov	r0, r1
 8005344:	4611      	mov	r1, r2
 8005346:	2200      	movs	r2, #0
 8005348:	602a      	str	r2, [r5, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	f7fb fb6f 	bl	8000a2e <_read>
 8005350:	1c43      	adds	r3, r0, #1
 8005352:	d102      	bne.n	800535a <_read_r+0x1e>
 8005354:	682b      	ldr	r3, [r5, #0]
 8005356:	b103      	cbz	r3, 800535a <_read_r+0x1e>
 8005358:	6023      	str	r3, [r4, #0]
 800535a:	bd38      	pop	{r3, r4, r5, pc}
 800535c:	200002fc 	.word	0x200002fc

08005360 <_write_r>:
 8005360:	b538      	push	{r3, r4, r5, lr}
 8005362:	4d07      	ldr	r5, [pc, #28]	@ (8005380 <_write_r+0x20>)
 8005364:	4604      	mov	r4, r0
 8005366:	4608      	mov	r0, r1
 8005368:	4611      	mov	r1, r2
 800536a:	2200      	movs	r2, #0
 800536c:	602a      	str	r2, [r5, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	f7fb fb7a 	bl	8000a68 <_write>
 8005374:	1c43      	adds	r3, r0, #1
 8005376:	d102      	bne.n	800537e <_write_r+0x1e>
 8005378:	682b      	ldr	r3, [r5, #0]
 800537a:	b103      	cbz	r3, 800537e <_write_r+0x1e>
 800537c:	6023      	str	r3, [r4, #0]
 800537e:	bd38      	pop	{r3, r4, r5, pc}
 8005380:	200002fc 	.word	0x200002fc

08005384 <__errno>:
 8005384:	4b01      	ldr	r3, [pc, #4]	@ (800538c <__errno+0x8>)
 8005386:	6818      	ldr	r0, [r3, #0]
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	20000040 	.word	0x20000040

08005390 <__libc_init_array>:
 8005390:	b570      	push	{r4, r5, r6, lr}
 8005392:	4d0d      	ldr	r5, [pc, #52]	@ (80053c8 <__libc_init_array+0x38>)
 8005394:	4c0d      	ldr	r4, [pc, #52]	@ (80053cc <__libc_init_array+0x3c>)
 8005396:	1b64      	subs	r4, r4, r5
 8005398:	10a4      	asrs	r4, r4, #2
 800539a:	2600      	movs	r6, #0
 800539c:	42a6      	cmp	r6, r4
 800539e:	d109      	bne.n	80053b4 <__libc_init_array+0x24>
 80053a0:	4d0b      	ldr	r5, [pc, #44]	@ (80053d0 <__libc_init_array+0x40>)
 80053a2:	4c0c      	ldr	r4, [pc, #48]	@ (80053d4 <__libc_init_array+0x44>)
 80053a4:	f000 fdb6 	bl	8005f14 <_init>
 80053a8:	1b64      	subs	r4, r4, r5
 80053aa:	10a4      	asrs	r4, r4, #2
 80053ac:	2600      	movs	r6, #0
 80053ae:	42a6      	cmp	r6, r4
 80053b0:	d105      	bne.n	80053be <__libc_init_array+0x2e>
 80053b2:	bd70      	pop	{r4, r5, r6, pc}
 80053b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053b8:	4798      	blx	r3
 80053ba:	3601      	adds	r6, #1
 80053bc:	e7ee      	b.n	800539c <__libc_init_array+0xc>
 80053be:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c2:	4798      	blx	r3
 80053c4:	3601      	adds	r6, #1
 80053c6:	e7f2      	b.n	80053ae <__libc_init_array+0x1e>
 80053c8:	08006084 	.word	0x08006084
 80053cc:	08006084 	.word	0x08006084
 80053d0:	08006084 	.word	0x08006084
 80053d4:	08006088 	.word	0x08006088

080053d8 <__retarget_lock_init_recursive>:
 80053d8:	4770      	bx	lr

080053da <__retarget_lock_acquire_recursive>:
 80053da:	4770      	bx	lr

080053dc <__retarget_lock_release_recursive>:
 80053dc:	4770      	bx	lr
	...

080053e0 <_free_r>:
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	4605      	mov	r5, r0
 80053e4:	2900      	cmp	r1, #0
 80053e6:	d041      	beq.n	800546c <_free_r+0x8c>
 80053e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053ec:	1f0c      	subs	r4, r1, #4
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	bfb8      	it	lt
 80053f2:	18e4      	addlt	r4, r4, r3
 80053f4:	f000 f8e0 	bl	80055b8 <__malloc_lock>
 80053f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005470 <_free_r+0x90>)
 80053fa:	6813      	ldr	r3, [r2, #0]
 80053fc:	b933      	cbnz	r3, 800540c <_free_r+0x2c>
 80053fe:	6063      	str	r3, [r4, #4]
 8005400:	6014      	str	r4, [r2, #0]
 8005402:	4628      	mov	r0, r5
 8005404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005408:	f000 b8dc 	b.w	80055c4 <__malloc_unlock>
 800540c:	42a3      	cmp	r3, r4
 800540e:	d908      	bls.n	8005422 <_free_r+0x42>
 8005410:	6820      	ldr	r0, [r4, #0]
 8005412:	1821      	adds	r1, r4, r0
 8005414:	428b      	cmp	r3, r1
 8005416:	bf01      	itttt	eq
 8005418:	6819      	ldreq	r1, [r3, #0]
 800541a:	685b      	ldreq	r3, [r3, #4]
 800541c:	1809      	addeq	r1, r1, r0
 800541e:	6021      	streq	r1, [r4, #0]
 8005420:	e7ed      	b.n	80053fe <_free_r+0x1e>
 8005422:	461a      	mov	r2, r3
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	b10b      	cbz	r3, 800542c <_free_r+0x4c>
 8005428:	42a3      	cmp	r3, r4
 800542a:	d9fa      	bls.n	8005422 <_free_r+0x42>
 800542c:	6811      	ldr	r1, [r2, #0]
 800542e:	1850      	adds	r0, r2, r1
 8005430:	42a0      	cmp	r0, r4
 8005432:	d10b      	bne.n	800544c <_free_r+0x6c>
 8005434:	6820      	ldr	r0, [r4, #0]
 8005436:	4401      	add	r1, r0
 8005438:	1850      	adds	r0, r2, r1
 800543a:	4283      	cmp	r3, r0
 800543c:	6011      	str	r1, [r2, #0]
 800543e:	d1e0      	bne.n	8005402 <_free_r+0x22>
 8005440:	6818      	ldr	r0, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	6053      	str	r3, [r2, #4]
 8005446:	4408      	add	r0, r1
 8005448:	6010      	str	r0, [r2, #0]
 800544a:	e7da      	b.n	8005402 <_free_r+0x22>
 800544c:	d902      	bls.n	8005454 <_free_r+0x74>
 800544e:	230c      	movs	r3, #12
 8005450:	602b      	str	r3, [r5, #0]
 8005452:	e7d6      	b.n	8005402 <_free_r+0x22>
 8005454:	6820      	ldr	r0, [r4, #0]
 8005456:	1821      	adds	r1, r4, r0
 8005458:	428b      	cmp	r3, r1
 800545a:	bf04      	itt	eq
 800545c:	6819      	ldreq	r1, [r3, #0]
 800545e:	685b      	ldreq	r3, [r3, #4]
 8005460:	6063      	str	r3, [r4, #4]
 8005462:	bf04      	itt	eq
 8005464:	1809      	addeq	r1, r1, r0
 8005466:	6021      	streq	r1, [r4, #0]
 8005468:	6054      	str	r4, [r2, #4]
 800546a:	e7ca      	b.n	8005402 <_free_r+0x22>
 800546c:	bd38      	pop	{r3, r4, r5, pc}
 800546e:	bf00      	nop
 8005470:	20000308 	.word	0x20000308

08005474 <sbrk_aligned>:
 8005474:	b570      	push	{r4, r5, r6, lr}
 8005476:	4e0f      	ldr	r6, [pc, #60]	@ (80054b4 <sbrk_aligned+0x40>)
 8005478:	460c      	mov	r4, r1
 800547a:	6831      	ldr	r1, [r6, #0]
 800547c:	4605      	mov	r5, r0
 800547e:	b911      	cbnz	r1, 8005486 <sbrk_aligned+0x12>
 8005480:	f000 fcb4 	bl	8005dec <_sbrk_r>
 8005484:	6030      	str	r0, [r6, #0]
 8005486:	4621      	mov	r1, r4
 8005488:	4628      	mov	r0, r5
 800548a:	f000 fcaf 	bl	8005dec <_sbrk_r>
 800548e:	1c43      	adds	r3, r0, #1
 8005490:	d103      	bne.n	800549a <sbrk_aligned+0x26>
 8005492:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005496:	4620      	mov	r0, r4
 8005498:	bd70      	pop	{r4, r5, r6, pc}
 800549a:	1cc4      	adds	r4, r0, #3
 800549c:	f024 0403 	bic.w	r4, r4, #3
 80054a0:	42a0      	cmp	r0, r4
 80054a2:	d0f8      	beq.n	8005496 <sbrk_aligned+0x22>
 80054a4:	1a21      	subs	r1, r4, r0
 80054a6:	4628      	mov	r0, r5
 80054a8:	f000 fca0 	bl	8005dec <_sbrk_r>
 80054ac:	3001      	adds	r0, #1
 80054ae:	d1f2      	bne.n	8005496 <sbrk_aligned+0x22>
 80054b0:	e7ef      	b.n	8005492 <sbrk_aligned+0x1e>
 80054b2:	bf00      	nop
 80054b4:	20000304 	.word	0x20000304

080054b8 <_malloc_r>:
 80054b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054bc:	1ccd      	adds	r5, r1, #3
 80054be:	f025 0503 	bic.w	r5, r5, #3
 80054c2:	3508      	adds	r5, #8
 80054c4:	2d0c      	cmp	r5, #12
 80054c6:	bf38      	it	cc
 80054c8:	250c      	movcc	r5, #12
 80054ca:	2d00      	cmp	r5, #0
 80054cc:	4606      	mov	r6, r0
 80054ce:	db01      	blt.n	80054d4 <_malloc_r+0x1c>
 80054d0:	42a9      	cmp	r1, r5
 80054d2:	d904      	bls.n	80054de <_malloc_r+0x26>
 80054d4:	230c      	movs	r3, #12
 80054d6:	6033      	str	r3, [r6, #0]
 80054d8:	2000      	movs	r0, #0
 80054da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055b4 <_malloc_r+0xfc>
 80054e2:	f000 f869 	bl	80055b8 <__malloc_lock>
 80054e6:	f8d8 3000 	ldr.w	r3, [r8]
 80054ea:	461c      	mov	r4, r3
 80054ec:	bb44      	cbnz	r4, 8005540 <_malloc_r+0x88>
 80054ee:	4629      	mov	r1, r5
 80054f0:	4630      	mov	r0, r6
 80054f2:	f7ff ffbf 	bl	8005474 <sbrk_aligned>
 80054f6:	1c43      	adds	r3, r0, #1
 80054f8:	4604      	mov	r4, r0
 80054fa:	d158      	bne.n	80055ae <_malloc_r+0xf6>
 80054fc:	f8d8 4000 	ldr.w	r4, [r8]
 8005500:	4627      	mov	r7, r4
 8005502:	2f00      	cmp	r7, #0
 8005504:	d143      	bne.n	800558e <_malloc_r+0xd6>
 8005506:	2c00      	cmp	r4, #0
 8005508:	d04b      	beq.n	80055a2 <_malloc_r+0xea>
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	4639      	mov	r1, r7
 800550e:	4630      	mov	r0, r6
 8005510:	eb04 0903 	add.w	r9, r4, r3
 8005514:	f000 fc6a 	bl	8005dec <_sbrk_r>
 8005518:	4581      	cmp	r9, r0
 800551a:	d142      	bne.n	80055a2 <_malloc_r+0xea>
 800551c:	6821      	ldr	r1, [r4, #0]
 800551e:	1a6d      	subs	r5, r5, r1
 8005520:	4629      	mov	r1, r5
 8005522:	4630      	mov	r0, r6
 8005524:	f7ff ffa6 	bl	8005474 <sbrk_aligned>
 8005528:	3001      	adds	r0, #1
 800552a:	d03a      	beq.n	80055a2 <_malloc_r+0xea>
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	442b      	add	r3, r5
 8005530:	6023      	str	r3, [r4, #0]
 8005532:	f8d8 3000 	ldr.w	r3, [r8]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	bb62      	cbnz	r2, 8005594 <_malloc_r+0xdc>
 800553a:	f8c8 7000 	str.w	r7, [r8]
 800553e:	e00f      	b.n	8005560 <_malloc_r+0xa8>
 8005540:	6822      	ldr	r2, [r4, #0]
 8005542:	1b52      	subs	r2, r2, r5
 8005544:	d420      	bmi.n	8005588 <_malloc_r+0xd0>
 8005546:	2a0b      	cmp	r2, #11
 8005548:	d917      	bls.n	800557a <_malloc_r+0xc2>
 800554a:	1961      	adds	r1, r4, r5
 800554c:	42a3      	cmp	r3, r4
 800554e:	6025      	str	r5, [r4, #0]
 8005550:	bf18      	it	ne
 8005552:	6059      	strne	r1, [r3, #4]
 8005554:	6863      	ldr	r3, [r4, #4]
 8005556:	bf08      	it	eq
 8005558:	f8c8 1000 	streq.w	r1, [r8]
 800555c:	5162      	str	r2, [r4, r5]
 800555e:	604b      	str	r3, [r1, #4]
 8005560:	4630      	mov	r0, r6
 8005562:	f000 f82f 	bl	80055c4 <__malloc_unlock>
 8005566:	f104 000b 	add.w	r0, r4, #11
 800556a:	1d23      	adds	r3, r4, #4
 800556c:	f020 0007 	bic.w	r0, r0, #7
 8005570:	1ac2      	subs	r2, r0, r3
 8005572:	bf1c      	itt	ne
 8005574:	1a1b      	subne	r3, r3, r0
 8005576:	50a3      	strne	r3, [r4, r2]
 8005578:	e7af      	b.n	80054da <_malloc_r+0x22>
 800557a:	6862      	ldr	r2, [r4, #4]
 800557c:	42a3      	cmp	r3, r4
 800557e:	bf0c      	ite	eq
 8005580:	f8c8 2000 	streq.w	r2, [r8]
 8005584:	605a      	strne	r2, [r3, #4]
 8005586:	e7eb      	b.n	8005560 <_malloc_r+0xa8>
 8005588:	4623      	mov	r3, r4
 800558a:	6864      	ldr	r4, [r4, #4]
 800558c:	e7ae      	b.n	80054ec <_malloc_r+0x34>
 800558e:	463c      	mov	r4, r7
 8005590:	687f      	ldr	r7, [r7, #4]
 8005592:	e7b6      	b.n	8005502 <_malloc_r+0x4a>
 8005594:	461a      	mov	r2, r3
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	42a3      	cmp	r3, r4
 800559a:	d1fb      	bne.n	8005594 <_malloc_r+0xdc>
 800559c:	2300      	movs	r3, #0
 800559e:	6053      	str	r3, [r2, #4]
 80055a0:	e7de      	b.n	8005560 <_malloc_r+0xa8>
 80055a2:	230c      	movs	r3, #12
 80055a4:	6033      	str	r3, [r6, #0]
 80055a6:	4630      	mov	r0, r6
 80055a8:	f000 f80c 	bl	80055c4 <__malloc_unlock>
 80055ac:	e794      	b.n	80054d8 <_malloc_r+0x20>
 80055ae:	6005      	str	r5, [r0, #0]
 80055b0:	e7d6      	b.n	8005560 <_malloc_r+0xa8>
 80055b2:	bf00      	nop
 80055b4:	20000308 	.word	0x20000308

080055b8 <__malloc_lock>:
 80055b8:	4801      	ldr	r0, [pc, #4]	@ (80055c0 <__malloc_lock+0x8>)
 80055ba:	f7ff bf0e 	b.w	80053da <__retarget_lock_acquire_recursive>
 80055be:	bf00      	nop
 80055c0:	20000300 	.word	0x20000300

080055c4 <__malloc_unlock>:
 80055c4:	4801      	ldr	r0, [pc, #4]	@ (80055cc <__malloc_unlock+0x8>)
 80055c6:	f7ff bf09 	b.w	80053dc <__retarget_lock_release_recursive>
 80055ca:	bf00      	nop
 80055cc:	20000300 	.word	0x20000300

080055d0 <__sfputc_r>:
 80055d0:	6893      	ldr	r3, [r2, #8]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	b410      	push	{r4}
 80055d8:	6093      	str	r3, [r2, #8]
 80055da:	da08      	bge.n	80055ee <__sfputc_r+0x1e>
 80055dc:	6994      	ldr	r4, [r2, #24]
 80055de:	42a3      	cmp	r3, r4
 80055e0:	db01      	blt.n	80055e6 <__sfputc_r+0x16>
 80055e2:	290a      	cmp	r1, #10
 80055e4:	d103      	bne.n	80055ee <__sfputc_r+0x1e>
 80055e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055ea:	f000 bb6b 	b.w	8005cc4 <__swbuf_r>
 80055ee:	6813      	ldr	r3, [r2, #0]
 80055f0:	1c58      	adds	r0, r3, #1
 80055f2:	6010      	str	r0, [r2, #0]
 80055f4:	7019      	strb	r1, [r3, #0]
 80055f6:	4608      	mov	r0, r1
 80055f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <__sfputs_r>:
 80055fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005600:	4606      	mov	r6, r0
 8005602:	460f      	mov	r7, r1
 8005604:	4614      	mov	r4, r2
 8005606:	18d5      	adds	r5, r2, r3
 8005608:	42ac      	cmp	r4, r5
 800560a:	d101      	bne.n	8005610 <__sfputs_r+0x12>
 800560c:	2000      	movs	r0, #0
 800560e:	e007      	b.n	8005620 <__sfputs_r+0x22>
 8005610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005614:	463a      	mov	r2, r7
 8005616:	4630      	mov	r0, r6
 8005618:	f7ff ffda 	bl	80055d0 <__sfputc_r>
 800561c:	1c43      	adds	r3, r0, #1
 800561e:	d1f3      	bne.n	8005608 <__sfputs_r+0xa>
 8005620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005624 <_vfiprintf_r>:
 8005624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005628:	460d      	mov	r5, r1
 800562a:	b09d      	sub	sp, #116	@ 0x74
 800562c:	4614      	mov	r4, r2
 800562e:	4698      	mov	r8, r3
 8005630:	4606      	mov	r6, r0
 8005632:	b118      	cbz	r0, 800563c <_vfiprintf_r+0x18>
 8005634:	6a03      	ldr	r3, [r0, #32]
 8005636:	b90b      	cbnz	r3, 800563c <_vfiprintf_r+0x18>
 8005638:	f7ff fdca 	bl	80051d0 <__sinit>
 800563c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800563e:	07d9      	lsls	r1, r3, #31
 8005640:	d405      	bmi.n	800564e <_vfiprintf_r+0x2a>
 8005642:	89ab      	ldrh	r3, [r5, #12]
 8005644:	059a      	lsls	r2, r3, #22
 8005646:	d402      	bmi.n	800564e <_vfiprintf_r+0x2a>
 8005648:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800564a:	f7ff fec6 	bl	80053da <__retarget_lock_acquire_recursive>
 800564e:	89ab      	ldrh	r3, [r5, #12]
 8005650:	071b      	lsls	r3, r3, #28
 8005652:	d501      	bpl.n	8005658 <_vfiprintf_r+0x34>
 8005654:	692b      	ldr	r3, [r5, #16]
 8005656:	b99b      	cbnz	r3, 8005680 <_vfiprintf_r+0x5c>
 8005658:	4629      	mov	r1, r5
 800565a:	4630      	mov	r0, r6
 800565c:	f000 fb70 	bl	8005d40 <__swsetup_r>
 8005660:	b170      	cbz	r0, 8005680 <_vfiprintf_r+0x5c>
 8005662:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005664:	07dc      	lsls	r4, r3, #31
 8005666:	d504      	bpl.n	8005672 <_vfiprintf_r+0x4e>
 8005668:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800566c:	b01d      	add	sp, #116	@ 0x74
 800566e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005672:	89ab      	ldrh	r3, [r5, #12]
 8005674:	0598      	lsls	r0, r3, #22
 8005676:	d4f7      	bmi.n	8005668 <_vfiprintf_r+0x44>
 8005678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800567a:	f7ff feaf 	bl	80053dc <__retarget_lock_release_recursive>
 800567e:	e7f3      	b.n	8005668 <_vfiprintf_r+0x44>
 8005680:	2300      	movs	r3, #0
 8005682:	9309      	str	r3, [sp, #36]	@ 0x24
 8005684:	2320      	movs	r3, #32
 8005686:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800568a:	f8cd 800c 	str.w	r8, [sp, #12]
 800568e:	2330      	movs	r3, #48	@ 0x30
 8005690:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005840 <_vfiprintf_r+0x21c>
 8005694:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005698:	f04f 0901 	mov.w	r9, #1
 800569c:	4623      	mov	r3, r4
 800569e:	469a      	mov	sl, r3
 80056a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056a4:	b10a      	cbz	r2, 80056aa <_vfiprintf_r+0x86>
 80056a6:	2a25      	cmp	r2, #37	@ 0x25
 80056a8:	d1f9      	bne.n	800569e <_vfiprintf_r+0x7a>
 80056aa:	ebba 0b04 	subs.w	fp, sl, r4
 80056ae:	d00b      	beq.n	80056c8 <_vfiprintf_r+0xa4>
 80056b0:	465b      	mov	r3, fp
 80056b2:	4622      	mov	r2, r4
 80056b4:	4629      	mov	r1, r5
 80056b6:	4630      	mov	r0, r6
 80056b8:	f7ff ffa1 	bl	80055fe <__sfputs_r>
 80056bc:	3001      	adds	r0, #1
 80056be:	f000 80a7 	beq.w	8005810 <_vfiprintf_r+0x1ec>
 80056c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056c4:	445a      	add	r2, fp
 80056c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80056c8:	f89a 3000 	ldrb.w	r3, [sl]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 809f 	beq.w	8005810 <_vfiprintf_r+0x1ec>
 80056d2:	2300      	movs	r3, #0
 80056d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056dc:	f10a 0a01 	add.w	sl, sl, #1
 80056e0:	9304      	str	r3, [sp, #16]
 80056e2:	9307      	str	r3, [sp, #28]
 80056e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80056e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80056ea:	4654      	mov	r4, sl
 80056ec:	2205      	movs	r2, #5
 80056ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056f2:	4853      	ldr	r0, [pc, #332]	@ (8005840 <_vfiprintf_r+0x21c>)
 80056f4:	f7fa fd44 	bl	8000180 <memchr>
 80056f8:	9a04      	ldr	r2, [sp, #16]
 80056fa:	b9d8      	cbnz	r0, 8005734 <_vfiprintf_r+0x110>
 80056fc:	06d1      	lsls	r1, r2, #27
 80056fe:	bf44      	itt	mi
 8005700:	2320      	movmi	r3, #32
 8005702:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005706:	0713      	lsls	r3, r2, #28
 8005708:	bf44      	itt	mi
 800570a:	232b      	movmi	r3, #43	@ 0x2b
 800570c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005710:	f89a 3000 	ldrb.w	r3, [sl]
 8005714:	2b2a      	cmp	r3, #42	@ 0x2a
 8005716:	d015      	beq.n	8005744 <_vfiprintf_r+0x120>
 8005718:	9a07      	ldr	r2, [sp, #28]
 800571a:	4654      	mov	r4, sl
 800571c:	2000      	movs	r0, #0
 800571e:	f04f 0c0a 	mov.w	ip, #10
 8005722:	4621      	mov	r1, r4
 8005724:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005728:	3b30      	subs	r3, #48	@ 0x30
 800572a:	2b09      	cmp	r3, #9
 800572c:	d94b      	bls.n	80057c6 <_vfiprintf_r+0x1a2>
 800572e:	b1b0      	cbz	r0, 800575e <_vfiprintf_r+0x13a>
 8005730:	9207      	str	r2, [sp, #28]
 8005732:	e014      	b.n	800575e <_vfiprintf_r+0x13a>
 8005734:	eba0 0308 	sub.w	r3, r0, r8
 8005738:	fa09 f303 	lsl.w	r3, r9, r3
 800573c:	4313      	orrs	r3, r2
 800573e:	9304      	str	r3, [sp, #16]
 8005740:	46a2      	mov	sl, r4
 8005742:	e7d2      	b.n	80056ea <_vfiprintf_r+0xc6>
 8005744:	9b03      	ldr	r3, [sp, #12]
 8005746:	1d19      	adds	r1, r3, #4
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	9103      	str	r1, [sp, #12]
 800574c:	2b00      	cmp	r3, #0
 800574e:	bfbb      	ittet	lt
 8005750:	425b      	neglt	r3, r3
 8005752:	f042 0202 	orrlt.w	r2, r2, #2
 8005756:	9307      	strge	r3, [sp, #28]
 8005758:	9307      	strlt	r3, [sp, #28]
 800575a:	bfb8      	it	lt
 800575c:	9204      	strlt	r2, [sp, #16]
 800575e:	7823      	ldrb	r3, [r4, #0]
 8005760:	2b2e      	cmp	r3, #46	@ 0x2e
 8005762:	d10a      	bne.n	800577a <_vfiprintf_r+0x156>
 8005764:	7863      	ldrb	r3, [r4, #1]
 8005766:	2b2a      	cmp	r3, #42	@ 0x2a
 8005768:	d132      	bne.n	80057d0 <_vfiprintf_r+0x1ac>
 800576a:	9b03      	ldr	r3, [sp, #12]
 800576c:	1d1a      	adds	r2, r3, #4
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	9203      	str	r2, [sp, #12]
 8005772:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005776:	3402      	adds	r4, #2
 8005778:	9305      	str	r3, [sp, #20]
 800577a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005850 <_vfiprintf_r+0x22c>
 800577e:	7821      	ldrb	r1, [r4, #0]
 8005780:	2203      	movs	r2, #3
 8005782:	4650      	mov	r0, sl
 8005784:	f7fa fcfc 	bl	8000180 <memchr>
 8005788:	b138      	cbz	r0, 800579a <_vfiprintf_r+0x176>
 800578a:	9b04      	ldr	r3, [sp, #16]
 800578c:	eba0 000a 	sub.w	r0, r0, sl
 8005790:	2240      	movs	r2, #64	@ 0x40
 8005792:	4082      	lsls	r2, r0
 8005794:	4313      	orrs	r3, r2
 8005796:	3401      	adds	r4, #1
 8005798:	9304      	str	r3, [sp, #16]
 800579a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800579e:	4829      	ldr	r0, [pc, #164]	@ (8005844 <_vfiprintf_r+0x220>)
 80057a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057a4:	2206      	movs	r2, #6
 80057a6:	f7fa fceb 	bl	8000180 <memchr>
 80057aa:	2800      	cmp	r0, #0
 80057ac:	d03f      	beq.n	800582e <_vfiprintf_r+0x20a>
 80057ae:	4b26      	ldr	r3, [pc, #152]	@ (8005848 <_vfiprintf_r+0x224>)
 80057b0:	bb1b      	cbnz	r3, 80057fa <_vfiprintf_r+0x1d6>
 80057b2:	9b03      	ldr	r3, [sp, #12]
 80057b4:	3307      	adds	r3, #7
 80057b6:	f023 0307 	bic.w	r3, r3, #7
 80057ba:	3308      	adds	r3, #8
 80057bc:	9303      	str	r3, [sp, #12]
 80057be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057c0:	443b      	add	r3, r7
 80057c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80057c4:	e76a      	b.n	800569c <_vfiprintf_r+0x78>
 80057c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80057ca:	460c      	mov	r4, r1
 80057cc:	2001      	movs	r0, #1
 80057ce:	e7a8      	b.n	8005722 <_vfiprintf_r+0xfe>
 80057d0:	2300      	movs	r3, #0
 80057d2:	3401      	adds	r4, #1
 80057d4:	9305      	str	r3, [sp, #20]
 80057d6:	4619      	mov	r1, r3
 80057d8:	f04f 0c0a 	mov.w	ip, #10
 80057dc:	4620      	mov	r0, r4
 80057de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057e2:	3a30      	subs	r2, #48	@ 0x30
 80057e4:	2a09      	cmp	r2, #9
 80057e6:	d903      	bls.n	80057f0 <_vfiprintf_r+0x1cc>
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0c6      	beq.n	800577a <_vfiprintf_r+0x156>
 80057ec:	9105      	str	r1, [sp, #20]
 80057ee:	e7c4      	b.n	800577a <_vfiprintf_r+0x156>
 80057f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80057f4:	4604      	mov	r4, r0
 80057f6:	2301      	movs	r3, #1
 80057f8:	e7f0      	b.n	80057dc <_vfiprintf_r+0x1b8>
 80057fa:	ab03      	add	r3, sp, #12
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	462a      	mov	r2, r5
 8005800:	4b12      	ldr	r3, [pc, #72]	@ (800584c <_vfiprintf_r+0x228>)
 8005802:	a904      	add	r1, sp, #16
 8005804:	4630      	mov	r0, r6
 8005806:	f3af 8000 	nop.w
 800580a:	4607      	mov	r7, r0
 800580c:	1c78      	adds	r0, r7, #1
 800580e:	d1d6      	bne.n	80057be <_vfiprintf_r+0x19a>
 8005810:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005812:	07d9      	lsls	r1, r3, #31
 8005814:	d405      	bmi.n	8005822 <_vfiprintf_r+0x1fe>
 8005816:	89ab      	ldrh	r3, [r5, #12]
 8005818:	059a      	lsls	r2, r3, #22
 800581a:	d402      	bmi.n	8005822 <_vfiprintf_r+0x1fe>
 800581c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800581e:	f7ff fddd 	bl	80053dc <__retarget_lock_release_recursive>
 8005822:	89ab      	ldrh	r3, [r5, #12]
 8005824:	065b      	lsls	r3, r3, #25
 8005826:	f53f af1f 	bmi.w	8005668 <_vfiprintf_r+0x44>
 800582a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800582c:	e71e      	b.n	800566c <_vfiprintf_r+0x48>
 800582e:	ab03      	add	r3, sp, #12
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	462a      	mov	r2, r5
 8005834:	4b05      	ldr	r3, [pc, #20]	@ (800584c <_vfiprintf_r+0x228>)
 8005836:	a904      	add	r1, sp, #16
 8005838:	4630      	mov	r0, r6
 800583a:	f000 f879 	bl	8005930 <_printf_i>
 800583e:	e7e4      	b.n	800580a <_vfiprintf_r+0x1e6>
 8005840:	08006048 	.word	0x08006048
 8005844:	08006052 	.word	0x08006052
 8005848:	00000000 	.word	0x00000000
 800584c:	080055ff 	.word	0x080055ff
 8005850:	0800604e 	.word	0x0800604e

08005854 <_printf_common>:
 8005854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005858:	4616      	mov	r6, r2
 800585a:	4698      	mov	r8, r3
 800585c:	688a      	ldr	r2, [r1, #8]
 800585e:	690b      	ldr	r3, [r1, #16]
 8005860:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005864:	4293      	cmp	r3, r2
 8005866:	bfb8      	it	lt
 8005868:	4613      	movlt	r3, r2
 800586a:	6033      	str	r3, [r6, #0]
 800586c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005870:	4607      	mov	r7, r0
 8005872:	460c      	mov	r4, r1
 8005874:	b10a      	cbz	r2, 800587a <_printf_common+0x26>
 8005876:	3301      	adds	r3, #1
 8005878:	6033      	str	r3, [r6, #0]
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	0699      	lsls	r1, r3, #26
 800587e:	bf42      	ittt	mi
 8005880:	6833      	ldrmi	r3, [r6, #0]
 8005882:	3302      	addmi	r3, #2
 8005884:	6033      	strmi	r3, [r6, #0]
 8005886:	6825      	ldr	r5, [r4, #0]
 8005888:	f015 0506 	ands.w	r5, r5, #6
 800588c:	d106      	bne.n	800589c <_printf_common+0x48>
 800588e:	f104 0a19 	add.w	sl, r4, #25
 8005892:	68e3      	ldr	r3, [r4, #12]
 8005894:	6832      	ldr	r2, [r6, #0]
 8005896:	1a9b      	subs	r3, r3, r2
 8005898:	42ab      	cmp	r3, r5
 800589a:	dc26      	bgt.n	80058ea <_printf_common+0x96>
 800589c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058a0:	6822      	ldr	r2, [r4, #0]
 80058a2:	3b00      	subs	r3, #0
 80058a4:	bf18      	it	ne
 80058a6:	2301      	movne	r3, #1
 80058a8:	0692      	lsls	r2, r2, #26
 80058aa:	d42b      	bmi.n	8005904 <_printf_common+0xb0>
 80058ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058b0:	4641      	mov	r1, r8
 80058b2:	4638      	mov	r0, r7
 80058b4:	47c8      	blx	r9
 80058b6:	3001      	adds	r0, #1
 80058b8:	d01e      	beq.n	80058f8 <_printf_common+0xa4>
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	6922      	ldr	r2, [r4, #16]
 80058be:	f003 0306 	and.w	r3, r3, #6
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	bf02      	ittt	eq
 80058c6:	68e5      	ldreq	r5, [r4, #12]
 80058c8:	6833      	ldreq	r3, [r6, #0]
 80058ca:	1aed      	subeq	r5, r5, r3
 80058cc:	68a3      	ldr	r3, [r4, #8]
 80058ce:	bf0c      	ite	eq
 80058d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058d4:	2500      	movne	r5, #0
 80058d6:	4293      	cmp	r3, r2
 80058d8:	bfc4      	itt	gt
 80058da:	1a9b      	subgt	r3, r3, r2
 80058dc:	18ed      	addgt	r5, r5, r3
 80058de:	2600      	movs	r6, #0
 80058e0:	341a      	adds	r4, #26
 80058e2:	42b5      	cmp	r5, r6
 80058e4:	d11a      	bne.n	800591c <_printf_common+0xc8>
 80058e6:	2000      	movs	r0, #0
 80058e8:	e008      	b.n	80058fc <_printf_common+0xa8>
 80058ea:	2301      	movs	r3, #1
 80058ec:	4652      	mov	r2, sl
 80058ee:	4641      	mov	r1, r8
 80058f0:	4638      	mov	r0, r7
 80058f2:	47c8      	blx	r9
 80058f4:	3001      	adds	r0, #1
 80058f6:	d103      	bne.n	8005900 <_printf_common+0xac>
 80058f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005900:	3501      	adds	r5, #1
 8005902:	e7c6      	b.n	8005892 <_printf_common+0x3e>
 8005904:	18e1      	adds	r1, r4, r3
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	2030      	movs	r0, #48	@ 0x30
 800590a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800590e:	4422      	add	r2, r4
 8005910:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005914:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005918:	3302      	adds	r3, #2
 800591a:	e7c7      	b.n	80058ac <_printf_common+0x58>
 800591c:	2301      	movs	r3, #1
 800591e:	4622      	mov	r2, r4
 8005920:	4641      	mov	r1, r8
 8005922:	4638      	mov	r0, r7
 8005924:	47c8      	blx	r9
 8005926:	3001      	adds	r0, #1
 8005928:	d0e6      	beq.n	80058f8 <_printf_common+0xa4>
 800592a:	3601      	adds	r6, #1
 800592c:	e7d9      	b.n	80058e2 <_printf_common+0x8e>
	...

08005930 <_printf_i>:
 8005930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005934:	7e0f      	ldrb	r7, [r1, #24]
 8005936:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005938:	2f78      	cmp	r7, #120	@ 0x78
 800593a:	4691      	mov	r9, r2
 800593c:	4680      	mov	r8, r0
 800593e:	460c      	mov	r4, r1
 8005940:	469a      	mov	sl, r3
 8005942:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005946:	d807      	bhi.n	8005958 <_printf_i+0x28>
 8005948:	2f62      	cmp	r7, #98	@ 0x62
 800594a:	d80a      	bhi.n	8005962 <_printf_i+0x32>
 800594c:	2f00      	cmp	r7, #0
 800594e:	f000 80d1 	beq.w	8005af4 <_printf_i+0x1c4>
 8005952:	2f58      	cmp	r7, #88	@ 0x58
 8005954:	f000 80b8 	beq.w	8005ac8 <_printf_i+0x198>
 8005958:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800595c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005960:	e03a      	b.n	80059d8 <_printf_i+0xa8>
 8005962:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005966:	2b15      	cmp	r3, #21
 8005968:	d8f6      	bhi.n	8005958 <_printf_i+0x28>
 800596a:	a101      	add	r1, pc, #4	@ (adr r1, 8005970 <_printf_i+0x40>)
 800596c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005970:	080059c9 	.word	0x080059c9
 8005974:	080059dd 	.word	0x080059dd
 8005978:	08005959 	.word	0x08005959
 800597c:	08005959 	.word	0x08005959
 8005980:	08005959 	.word	0x08005959
 8005984:	08005959 	.word	0x08005959
 8005988:	080059dd 	.word	0x080059dd
 800598c:	08005959 	.word	0x08005959
 8005990:	08005959 	.word	0x08005959
 8005994:	08005959 	.word	0x08005959
 8005998:	08005959 	.word	0x08005959
 800599c:	08005adb 	.word	0x08005adb
 80059a0:	08005a07 	.word	0x08005a07
 80059a4:	08005a95 	.word	0x08005a95
 80059a8:	08005959 	.word	0x08005959
 80059ac:	08005959 	.word	0x08005959
 80059b0:	08005afd 	.word	0x08005afd
 80059b4:	08005959 	.word	0x08005959
 80059b8:	08005a07 	.word	0x08005a07
 80059bc:	08005959 	.word	0x08005959
 80059c0:	08005959 	.word	0x08005959
 80059c4:	08005a9d 	.word	0x08005a9d
 80059c8:	6833      	ldr	r3, [r6, #0]
 80059ca:	1d1a      	adds	r2, r3, #4
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6032      	str	r2, [r6, #0]
 80059d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059d8:	2301      	movs	r3, #1
 80059da:	e09c      	b.n	8005b16 <_printf_i+0x1e6>
 80059dc:	6833      	ldr	r3, [r6, #0]
 80059de:	6820      	ldr	r0, [r4, #0]
 80059e0:	1d19      	adds	r1, r3, #4
 80059e2:	6031      	str	r1, [r6, #0]
 80059e4:	0606      	lsls	r6, r0, #24
 80059e6:	d501      	bpl.n	80059ec <_printf_i+0xbc>
 80059e8:	681d      	ldr	r5, [r3, #0]
 80059ea:	e003      	b.n	80059f4 <_printf_i+0xc4>
 80059ec:	0645      	lsls	r5, r0, #25
 80059ee:	d5fb      	bpl.n	80059e8 <_printf_i+0xb8>
 80059f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059f4:	2d00      	cmp	r5, #0
 80059f6:	da03      	bge.n	8005a00 <_printf_i+0xd0>
 80059f8:	232d      	movs	r3, #45	@ 0x2d
 80059fa:	426d      	negs	r5, r5
 80059fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a00:	4858      	ldr	r0, [pc, #352]	@ (8005b64 <_printf_i+0x234>)
 8005a02:	230a      	movs	r3, #10
 8005a04:	e011      	b.n	8005a2a <_printf_i+0xfa>
 8005a06:	6821      	ldr	r1, [r4, #0]
 8005a08:	6833      	ldr	r3, [r6, #0]
 8005a0a:	0608      	lsls	r0, r1, #24
 8005a0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a10:	d402      	bmi.n	8005a18 <_printf_i+0xe8>
 8005a12:	0649      	lsls	r1, r1, #25
 8005a14:	bf48      	it	mi
 8005a16:	b2ad      	uxthmi	r5, r5
 8005a18:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a1a:	4852      	ldr	r0, [pc, #328]	@ (8005b64 <_printf_i+0x234>)
 8005a1c:	6033      	str	r3, [r6, #0]
 8005a1e:	bf14      	ite	ne
 8005a20:	230a      	movne	r3, #10
 8005a22:	2308      	moveq	r3, #8
 8005a24:	2100      	movs	r1, #0
 8005a26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a2a:	6866      	ldr	r6, [r4, #4]
 8005a2c:	60a6      	str	r6, [r4, #8]
 8005a2e:	2e00      	cmp	r6, #0
 8005a30:	db05      	blt.n	8005a3e <_printf_i+0x10e>
 8005a32:	6821      	ldr	r1, [r4, #0]
 8005a34:	432e      	orrs	r6, r5
 8005a36:	f021 0104 	bic.w	r1, r1, #4
 8005a3a:	6021      	str	r1, [r4, #0]
 8005a3c:	d04b      	beq.n	8005ad6 <_printf_i+0x1a6>
 8005a3e:	4616      	mov	r6, r2
 8005a40:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a44:	fb03 5711 	mls	r7, r3, r1, r5
 8005a48:	5dc7      	ldrb	r7, [r0, r7]
 8005a4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a4e:	462f      	mov	r7, r5
 8005a50:	42bb      	cmp	r3, r7
 8005a52:	460d      	mov	r5, r1
 8005a54:	d9f4      	bls.n	8005a40 <_printf_i+0x110>
 8005a56:	2b08      	cmp	r3, #8
 8005a58:	d10b      	bne.n	8005a72 <_printf_i+0x142>
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	07df      	lsls	r7, r3, #31
 8005a5e:	d508      	bpl.n	8005a72 <_printf_i+0x142>
 8005a60:	6923      	ldr	r3, [r4, #16]
 8005a62:	6861      	ldr	r1, [r4, #4]
 8005a64:	4299      	cmp	r1, r3
 8005a66:	bfde      	ittt	le
 8005a68:	2330      	movle	r3, #48	@ 0x30
 8005a6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a6e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005a72:	1b92      	subs	r2, r2, r6
 8005a74:	6122      	str	r2, [r4, #16]
 8005a76:	f8cd a000 	str.w	sl, [sp]
 8005a7a:	464b      	mov	r3, r9
 8005a7c:	aa03      	add	r2, sp, #12
 8005a7e:	4621      	mov	r1, r4
 8005a80:	4640      	mov	r0, r8
 8005a82:	f7ff fee7 	bl	8005854 <_printf_common>
 8005a86:	3001      	adds	r0, #1
 8005a88:	d14a      	bne.n	8005b20 <_printf_i+0x1f0>
 8005a8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a8e:	b004      	add	sp, #16
 8005a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	f043 0320 	orr.w	r3, r3, #32
 8005a9a:	6023      	str	r3, [r4, #0]
 8005a9c:	4832      	ldr	r0, [pc, #200]	@ (8005b68 <_printf_i+0x238>)
 8005a9e:	2778      	movs	r7, #120	@ 0x78
 8005aa0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	6831      	ldr	r1, [r6, #0]
 8005aa8:	061f      	lsls	r7, r3, #24
 8005aaa:	f851 5b04 	ldr.w	r5, [r1], #4
 8005aae:	d402      	bmi.n	8005ab6 <_printf_i+0x186>
 8005ab0:	065f      	lsls	r7, r3, #25
 8005ab2:	bf48      	it	mi
 8005ab4:	b2ad      	uxthmi	r5, r5
 8005ab6:	6031      	str	r1, [r6, #0]
 8005ab8:	07d9      	lsls	r1, r3, #31
 8005aba:	bf44      	itt	mi
 8005abc:	f043 0320 	orrmi.w	r3, r3, #32
 8005ac0:	6023      	strmi	r3, [r4, #0]
 8005ac2:	b11d      	cbz	r5, 8005acc <_printf_i+0x19c>
 8005ac4:	2310      	movs	r3, #16
 8005ac6:	e7ad      	b.n	8005a24 <_printf_i+0xf4>
 8005ac8:	4826      	ldr	r0, [pc, #152]	@ (8005b64 <_printf_i+0x234>)
 8005aca:	e7e9      	b.n	8005aa0 <_printf_i+0x170>
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	f023 0320 	bic.w	r3, r3, #32
 8005ad2:	6023      	str	r3, [r4, #0]
 8005ad4:	e7f6      	b.n	8005ac4 <_printf_i+0x194>
 8005ad6:	4616      	mov	r6, r2
 8005ad8:	e7bd      	b.n	8005a56 <_printf_i+0x126>
 8005ada:	6833      	ldr	r3, [r6, #0]
 8005adc:	6825      	ldr	r5, [r4, #0]
 8005ade:	6961      	ldr	r1, [r4, #20]
 8005ae0:	1d18      	adds	r0, r3, #4
 8005ae2:	6030      	str	r0, [r6, #0]
 8005ae4:	062e      	lsls	r6, r5, #24
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	d501      	bpl.n	8005aee <_printf_i+0x1be>
 8005aea:	6019      	str	r1, [r3, #0]
 8005aec:	e002      	b.n	8005af4 <_printf_i+0x1c4>
 8005aee:	0668      	lsls	r0, r5, #25
 8005af0:	d5fb      	bpl.n	8005aea <_printf_i+0x1ba>
 8005af2:	8019      	strh	r1, [r3, #0]
 8005af4:	2300      	movs	r3, #0
 8005af6:	6123      	str	r3, [r4, #16]
 8005af8:	4616      	mov	r6, r2
 8005afa:	e7bc      	b.n	8005a76 <_printf_i+0x146>
 8005afc:	6833      	ldr	r3, [r6, #0]
 8005afe:	1d1a      	adds	r2, r3, #4
 8005b00:	6032      	str	r2, [r6, #0]
 8005b02:	681e      	ldr	r6, [r3, #0]
 8005b04:	6862      	ldr	r2, [r4, #4]
 8005b06:	2100      	movs	r1, #0
 8005b08:	4630      	mov	r0, r6
 8005b0a:	f7fa fb39 	bl	8000180 <memchr>
 8005b0e:	b108      	cbz	r0, 8005b14 <_printf_i+0x1e4>
 8005b10:	1b80      	subs	r0, r0, r6
 8005b12:	6060      	str	r0, [r4, #4]
 8005b14:	6863      	ldr	r3, [r4, #4]
 8005b16:	6123      	str	r3, [r4, #16]
 8005b18:	2300      	movs	r3, #0
 8005b1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b1e:	e7aa      	b.n	8005a76 <_printf_i+0x146>
 8005b20:	6923      	ldr	r3, [r4, #16]
 8005b22:	4632      	mov	r2, r6
 8005b24:	4649      	mov	r1, r9
 8005b26:	4640      	mov	r0, r8
 8005b28:	47d0      	blx	sl
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	d0ad      	beq.n	8005a8a <_printf_i+0x15a>
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	079b      	lsls	r3, r3, #30
 8005b32:	d413      	bmi.n	8005b5c <_printf_i+0x22c>
 8005b34:	68e0      	ldr	r0, [r4, #12]
 8005b36:	9b03      	ldr	r3, [sp, #12]
 8005b38:	4298      	cmp	r0, r3
 8005b3a:	bfb8      	it	lt
 8005b3c:	4618      	movlt	r0, r3
 8005b3e:	e7a6      	b.n	8005a8e <_printf_i+0x15e>
 8005b40:	2301      	movs	r3, #1
 8005b42:	4632      	mov	r2, r6
 8005b44:	4649      	mov	r1, r9
 8005b46:	4640      	mov	r0, r8
 8005b48:	47d0      	blx	sl
 8005b4a:	3001      	adds	r0, #1
 8005b4c:	d09d      	beq.n	8005a8a <_printf_i+0x15a>
 8005b4e:	3501      	adds	r5, #1
 8005b50:	68e3      	ldr	r3, [r4, #12]
 8005b52:	9903      	ldr	r1, [sp, #12]
 8005b54:	1a5b      	subs	r3, r3, r1
 8005b56:	42ab      	cmp	r3, r5
 8005b58:	dcf2      	bgt.n	8005b40 <_printf_i+0x210>
 8005b5a:	e7eb      	b.n	8005b34 <_printf_i+0x204>
 8005b5c:	2500      	movs	r5, #0
 8005b5e:	f104 0619 	add.w	r6, r4, #25
 8005b62:	e7f5      	b.n	8005b50 <_printf_i+0x220>
 8005b64:	08006059 	.word	0x08006059
 8005b68:	0800606a 	.word	0x0800606a

08005b6c <__sflush_r>:
 8005b6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b74:	0716      	lsls	r6, r2, #28
 8005b76:	4605      	mov	r5, r0
 8005b78:	460c      	mov	r4, r1
 8005b7a:	d454      	bmi.n	8005c26 <__sflush_r+0xba>
 8005b7c:	684b      	ldr	r3, [r1, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	dc02      	bgt.n	8005b88 <__sflush_r+0x1c>
 8005b82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	dd48      	ble.n	8005c1a <__sflush_r+0xae>
 8005b88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b8a:	2e00      	cmp	r6, #0
 8005b8c:	d045      	beq.n	8005c1a <__sflush_r+0xae>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005b94:	682f      	ldr	r7, [r5, #0]
 8005b96:	6a21      	ldr	r1, [r4, #32]
 8005b98:	602b      	str	r3, [r5, #0]
 8005b9a:	d030      	beq.n	8005bfe <__sflush_r+0x92>
 8005b9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005b9e:	89a3      	ldrh	r3, [r4, #12]
 8005ba0:	0759      	lsls	r1, r3, #29
 8005ba2:	d505      	bpl.n	8005bb0 <__sflush_r+0x44>
 8005ba4:	6863      	ldr	r3, [r4, #4]
 8005ba6:	1ad2      	subs	r2, r2, r3
 8005ba8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005baa:	b10b      	cbz	r3, 8005bb0 <__sflush_r+0x44>
 8005bac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005bae:	1ad2      	subs	r2, r2, r3
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005bb4:	6a21      	ldr	r1, [r4, #32]
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	47b0      	blx	r6
 8005bba:	1c43      	adds	r3, r0, #1
 8005bbc:	89a3      	ldrh	r3, [r4, #12]
 8005bbe:	d106      	bne.n	8005bce <__sflush_r+0x62>
 8005bc0:	6829      	ldr	r1, [r5, #0]
 8005bc2:	291d      	cmp	r1, #29
 8005bc4:	d82b      	bhi.n	8005c1e <__sflush_r+0xb2>
 8005bc6:	4a2a      	ldr	r2, [pc, #168]	@ (8005c70 <__sflush_r+0x104>)
 8005bc8:	40ca      	lsrs	r2, r1
 8005bca:	07d6      	lsls	r6, r2, #31
 8005bcc:	d527      	bpl.n	8005c1e <__sflush_r+0xb2>
 8005bce:	2200      	movs	r2, #0
 8005bd0:	6062      	str	r2, [r4, #4]
 8005bd2:	04d9      	lsls	r1, r3, #19
 8005bd4:	6922      	ldr	r2, [r4, #16]
 8005bd6:	6022      	str	r2, [r4, #0]
 8005bd8:	d504      	bpl.n	8005be4 <__sflush_r+0x78>
 8005bda:	1c42      	adds	r2, r0, #1
 8005bdc:	d101      	bne.n	8005be2 <__sflush_r+0x76>
 8005bde:	682b      	ldr	r3, [r5, #0]
 8005be0:	b903      	cbnz	r3, 8005be4 <__sflush_r+0x78>
 8005be2:	6560      	str	r0, [r4, #84]	@ 0x54
 8005be4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005be6:	602f      	str	r7, [r5, #0]
 8005be8:	b1b9      	cbz	r1, 8005c1a <__sflush_r+0xae>
 8005bea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bee:	4299      	cmp	r1, r3
 8005bf0:	d002      	beq.n	8005bf8 <__sflush_r+0x8c>
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	f7ff fbf4 	bl	80053e0 <_free_r>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bfc:	e00d      	b.n	8005c1a <__sflush_r+0xae>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	4628      	mov	r0, r5
 8005c02:	47b0      	blx	r6
 8005c04:	4602      	mov	r2, r0
 8005c06:	1c50      	adds	r0, r2, #1
 8005c08:	d1c9      	bne.n	8005b9e <__sflush_r+0x32>
 8005c0a:	682b      	ldr	r3, [r5, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0c6      	beq.n	8005b9e <__sflush_r+0x32>
 8005c10:	2b1d      	cmp	r3, #29
 8005c12:	d001      	beq.n	8005c18 <__sflush_r+0xac>
 8005c14:	2b16      	cmp	r3, #22
 8005c16:	d11e      	bne.n	8005c56 <__sflush_r+0xea>
 8005c18:	602f      	str	r7, [r5, #0]
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	e022      	b.n	8005c64 <__sflush_r+0xf8>
 8005c1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c22:	b21b      	sxth	r3, r3
 8005c24:	e01b      	b.n	8005c5e <__sflush_r+0xf2>
 8005c26:	690f      	ldr	r7, [r1, #16]
 8005c28:	2f00      	cmp	r7, #0
 8005c2a:	d0f6      	beq.n	8005c1a <__sflush_r+0xae>
 8005c2c:	0793      	lsls	r3, r2, #30
 8005c2e:	680e      	ldr	r6, [r1, #0]
 8005c30:	bf08      	it	eq
 8005c32:	694b      	ldreq	r3, [r1, #20]
 8005c34:	600f      	str	r7, [r1, #0]
 8005c36:	bf18      	it	ne
 8005c38:	2300      	movne	r3, #0
 8005c3a:	eba6 0807 	sub.w	r8, r6, r7
 8005c3e:	608b      	str	r3, [r1, #8]
 8005c40:	f1b8 0f00 	cmp.w	r8, #0
 8005c44:	dde9      	ble.n	8005c1a <__sflush_r+0xae>
 8005c46:	6a21      	ldr	r1, [r4, #32]
 8005c48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005c4a:	4643      	mov	r3, r8
 8005c4c:	463a      	mov	r2, r7
 8005c4e:	4628      	mov	r0, r5
 8005c50:	47b0      	blx	r6
 8005c52:	2800      	cmp	r0, #0
 8005c54:	dc08      	bgt.n	8005c68 <__sflush_r+0xfc>
 8005c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c5e:	81a3      	strh	r3, [r4, #12]
 8005c60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c68:	4407      	add	r7, r0
 8005c6a:	eba8 0800 	sub.w	r8, r8, r0
 8005c6e:	e7e7      	b.n	8005c40 <__sflush_r+0xd4>
 8005c70:	20400001 	.word	0x20400001

08005c74 <_fflush_r>:
 8005c74:	b538      	push	{r3, r4, r5, lr}
 8005c76:	690b      	ldr	r3, [r1, #16]
 8005c78:	4605      	mov	r5, r0
 8005c7a:	460c      	mov	r4, r1
 8005c7c:	b913      	cbnz	r3, 8005c84 <_fflush_r+0x10>
 8005c7e:	2500      	movs	r5, #0
 8005c80:	4628      	mov	r0, r5
 8005c82:	bd38      	pop	{r3, r4, r5, pc}
 8005c84:	b118      	cbz	r0, 8005c8e <_fflush_r+0x1a>
 8005c86:	6a03      	ldr	r3, [r0, #32]
 8005c88:	b90b      	cbnz	r3, 8005c8e <_fflush_r+0x1a>
 8005c8a:	f7ff faa1 	bl	80051d0 <__sinit>
 8005c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0f3      	beq.n	8005c7e <_fflush_r+0xa>
 8005c96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005c98:	07d0      	lsls	r0, r2, #31
 8005c9a:	d404      	bmi.n	8005ca6 <_fflush_r+0x32>
 8005c9c:	0599      	lsls	r1, r3, #22
 8005c9e:	d402      	bmi.n	8005ca6 <_fflush_r+0x32>
 8005ca0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ca2:	f7ff fb9a 	bl	80053da <__retarget_lock_acquire_recursive>
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	4621      	mov	r1, r4
 8005caa:	f7ff ff5f 	bl	8005b6c <__sflush_r>
 8005cae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cb0:	07da      	lsls	r2, r3, #31
 8005cb2:	4605      	mov	r5, r0
 8005cb4:	d4e4      	bmi.n	8005c80 <_fflush_r+0xc>
 8005cb6:	89a3      	ldrh	r3, [r4, #12]
 8005cb8:	059b      	lsls	r3, r3, #22
 8005cba:	d4e1      	bmi.n	8005c80 <_fflush_r+0xc>
 8005cbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cbe:	f7ff fb8d 	bl	80053dc <__retarget_lock_release_recursive>
 8005cc2:	e7dd      	b.n	8005c80 <_fflush_r+0xc>

08005cc4 <__swbuf_r>:
 8005cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc6:	460e      	mov	r6, r1
 8005cc8:	4614      	mov	r4, r2
 8005cca:	4605      	mov	r5, r0
 8005ccc:	b118      	cbz	r0, 8005cd6 <__swbuf_r+0x12>
 8005cce:	6a03      	ldr	r3, [r0, #32]
 8005cd0:	b90b      	cbnz	r3, 8005cd6 <__swbuf_r+0x12>
 8005cd2:	f7ff fa7d 	bl	80051d0 <__sinit>
 8005cd6:	69a3      	ldr	r3, [r4, #24]
 8005cd8:	60a3      	str	r3, [r4, #8]
 8005cda:	89a3      	ldrh	r3, [r4, #12]
 8005cdc:	071a      	lsls	r2, r3, #28
 8005cde:	d501      	bpl.n	8005ce4 <__swbuf_r+0x20>
 8005ce0:	6923      	ldr	r3, [r4, #16]
 8005ce2:	b943      	cbnz	r3, 8005cf6 <__swbuf_r+0x32>
 8005ce4:	4621      	mov	r1, r4
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	f000 f82a 	bl	8005d40 <__swsetup_r>
 8005cec:	b118      	cbz	r0, 8005cf6 <__swbuf_r+0x32>
 8005cee:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005cf2:	4638      	mov	r0, r7
 8005cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cf6:	6823      	ldr	r3, [r4, #0]
 8005cf8:	6922      	ldr	r2, [r4, #16]
 8005cfa:	1a98      	subs	r0, r3, r2
 8005cfc:	6963      	ldr	r3, [r4, #20]
 8005cfe:	b2f6      	uxtb	r6, r6
 8005d00:	4283      	cmp	r3, r0
 8005d02:	4637      	mov	r7, r6
 8005d04:	dc05      	bgt.n	8005d12 <__swbuf_r+0x4e>
 8005d06:	4621      	mov	r1, r4
 8005d08:	4628      	mov	r0, r5
 8005d0a:	f7ff ffb3 	bl	8005c74 <_fflush_r>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d1ed      	bne.n	8005cee <__swbuf_r+0x2a>
 8005d12:	68a3      	ldr	r3, [r4, #8]
 8005d14:	3b01      	subs	r3, #1
 8005d16:	60a3      	str	r3, [r4, #8]
 8005d18:	6823      	ldr	r3, [r4, #0]
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	6022      	str	r2, [r4, #0]
 8005d1e:	701e      	strb	r6, [r3, #0]
 8005d20:	6962      	ldr	r2, [r4, #20]
 8005d22:	1c43      	adds	r3, r0, #1
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d004      	beq.n	8005d32 <__swbuf_r+0x6e>
 8005d28:	89a3      	ldrh	r3, [r4, #12]
 8005d2a:	07db      	lsls	r3, r3, #31
 8005d2c:	d5e1      	bpl.n	8005cf2 <__swbuf_r+0x2e>
 8005d2e:	2e0a      	cmp	r6, #10
 8005d30:	d1df      	bne.n	8005cf2 <__swbuf_r+0x2e>
 8005d32:	4621      	mov	r1, r4
 8005d34:	4628      	mov	r0, r5
 8005d36:	f7ff ff9d 	bl	8005c74 <_fflush_r>
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	d0d9      	beq.n	8005cf2 <__swbuf_r+0x2e>
 8005d3e:	e7d6      	b.n	8005cee <__swbuf_r+0x2a>

08005d40 <__swsetup_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	4b29      	ldr	r3, [pc, #164]	@ (8005de8 <__swsetup_r+0xa8>)
 8005d44:	4605      	mov	r5, r0
 8005d46:	6818      	ldr	r0, [r3, #0]
 8005d48:	460c      	mov	r4, r1
 8005d4a:	b118      	cbz	r0, 8005d54 <__swsetup_r+0x14>
 8005d4c:	6a03      	ldr	r3, [r0, #32]
 8005d4e:	b90b      	cbnz	r3, 8005d54 <__swsetup_r+0x14>
 8005d50:	f7ff fa3e 	bl	80051d0 <__sinit>
 8005d54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d58:	0719      	lsls	r1, r3, #28
 8005d5a:	d422      	bmi.n	8005da2 <__swsetup_r+0x62>
 8005d5c:	06da      	lsls	r2, r3, #27
 8005d5e:	d407      	bmi.n	8005d70 <__swsetup_r+0x30>
 8005d60:	2209      	movs	r2, #9
 8005d62:	602a      	str	r2, [r5, #0]
 8005d64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d68:	81a3      	strh	r3, [r4, #12]
 8005d6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d6e:	e033      	b.n	8005dd8 <__swsetup_r+0x98>
 8005d70:	0758      	lsls	r0, r3, #29
 8005d72:	d512      	bpl.n	8005d9a <__swsetup_r+0x5a>
 8005d74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d76:	b141      	cbz	r1, 8005d8a <__swsetup_r+0x4a>
 8005d78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d7c:	4299      	cmp	r1, r3
 8005d7e:	d002      	beq.n	8005d86 <__swsetup_r+0x46>
 8005d80:	4628      	mov	r0, r5
 8005d82:	f7ff fb2d 	bl	80053e0 <_free_r>
 8005d86:	2300      	movs	r3, #0
 8005d88:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d8a:	89a3      	ldrh	r3, [r4, #12]
 8005d8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d90:	81a3      	strh	r3, [r4, #12]
 8005d92:	2300      	movs	r3, #0
 8005d94:	6063      	str	r3, [r4, #4]
 8005d96:	6923      	ldr	r3, [r4, #16]
 8005d98:	6023      	str	r3, [r4, #0]
 8005d9a:	89a3      	ldrh	r3, [r4, #12]
 8005d9c:	f043 0308 	orr.w	r3, r3, #8
 8005da0:	81a3      	strh	r3, [r4, #12]
 8005da2:	6923      	ldr	r3, [r4, #16]
 8005da4:	b94b      	cbnz	r3, 8005dba <__swsetup_r+0x7a>
 8005da6:	89a3      	ldrh	r3, [r4, #12]
 8005da8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005db0:	d003      	beq.n	8005dba <__swsetup_r+0x7a>
 8005db2:	4621      	mov	r1, r4
 8005db4:	4628      	mov	r0, r5
 8005db6:	f000 f84f 	bl	8005e58 <__smakebuf_r>
 8005dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dbe:	f013 0201 	ands.w	r2, r3, #1
 8005dc2:	d00a      	beq.n	8005dda <__swsetup_r+0x9a>
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	60a2      	str	r2, [r4, #8]
 8005dc8:	6962      	ldr	r2, [r4, #20]
 8005dca:	4252      	negs	r2, r2
 8005dcc:	61a2      	str	r2, [r4, #24]
 8005dce:	6922      	ldr	r2, [r4, #16]
 8005dd0:	b942      	cbnz	r2, 8005de4 <__swsetup_r+0xa4>
 8005dd2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005dd6:	d1c5      	bne.n	8005d64 <__swsetup_r+0x24>
 8005dd8:	bd38      	pop	{r3, r4, r5, pc}
 8005dda:	0799      	lsls	r1, r3, #30
 8005ddc:	bf58      	it	pl
 8005dde:	6962      	ldrpl	r2, [r4, #20]
 8005de0:	60a2      	str	r2, [r4, #8]
 8005de2:	e7f4      	b.n	8005dce <__swsetup_r+0x8e>
 8005de4:	2000      	movs	r0, #0
 8005de6:	e7f7      	b.n	8005dd8 <__swsetup_r+0x98>
 8005de8:	20000040 	.word	0x20000040

08005dec <_sbrk_r>:
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	4d06      	ldr	r5, [pc, #24]	@ (8005e08 <_sbrk_r+0x1c>)
 8005df0:	2300      	movs	r3, #0
 8005df2:	4604      	mov	r4, r0
 8005df4:	4608      	mov	r0, r1
 8005df6:	602b      	str	r3, [r5, #0]
 8005df8:	f7fa fe86 	bl	8000b08 <_sbrk>
 8005dfc:	1c43      	adds	r3, r0, #1
 8005dfe:	d102      	bne.n	8005e06 <_sbrk_r+0x1a>
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	b103      	cbz	r3, 8005e06 <_sbrk_r+0x1a>
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	bd38      	pop	{r3, r4, r5, pc}
 8005e08:	200002fc 	.word	0x200002fc

08005e0c <__swhatbuf_r>:
 8005e0c:	b570      	push	{r4, r5, r6, lr}
 8005e0e:	460c      	mov	r4, r1
 8005e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e14:	2900      	cmp	r1, #0
 8005e16:	b096      	sub	sp, #88	@ 0x58
 8005e18:	4615      	mov	r5, r2
 8005e1a:	461e      	mov	r6, r3
 8005e1c:	da0d      	bge.n	8005e3a <__swhatbuf_r+0x2e>
 8005e1e:	89a3      	ldrh	r3, [r4, #12]
 8005e20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005e24:	f04f 0100 	mov.w	r1, #0
 8005e28:	bf14      	ite	ne
 8005e2a:	2340      	movne	r3, #64	@ 0x40
 8005e2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005e30:	2000      	movs	r0, #0
 8005e32:	6031      	str	r1, [r6, #0]
 8005e34:	602b      	str	r3, [r5, #0]
 8005e36:	b016      	add	sp, #88	@ 0x58
 8005e38:	bd70      	pop	{r4, r5, r6, pc}
 8005e3a:	466a      	mov	r2, sp
 8005e3c:	f000 f848 	bl	8005ed0 <_fstat_r>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	dbec      	blt.n	8005e1e <__swhatbuf_r+0x12>
 8005e44:	9901      	ldr	r1, [sp, #4]
 8005e46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005e4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005e4e:	4259      	negs	r1, r3
 8005e50:	4159      	adcs	r1, r3
 8005e52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e56:	e7eb      	b.n	8005e30 <__swhatbuf_r+0x24>

08005e58 <__smakebuf_r>:
 8005e58:	898b      	ldrh	r3, [r1, #12]
 8005e5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e5c:	079d      	lsls	r5, r3, #30
 8005e5e:	4606      	mov	r6, r0
 8005e60:	460c      	mov	r4, r1
 8005e62:	d507      	bpl.n	8005e74 <__smakebuf_r+0x1c>
 8005e64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005e68:	6023      	str	r3, [r4, #0]
 8005e6a:	6123      	str	r3, [r4, #16]
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	6163      	str	r3, [r4, #20]
 8005e70:	b003      	add	sp, #12
 8005e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e74:	ab01      	add	r3, sp, #4
 8005e76:	466a      	mov	r2, sp
 8005e78:	f7ff ffc8 	bl	8005e0c <__swhatbuf_r>
 8005e7c:	9f00      	ldr	r7, [sp, #0]
 8005e7e:	4605      	mov	r5, r0
 8005e80:	4639      	mov	r1, r7
 8005e82:	4630      	mov	r0, r6
 8005e84:	f7ff fb18 	bl	80054b8 <_malloc_r>
 8005e88:	b948      	cbnz	r0, 8005e9e <__smakebuf_r+0x46>
 8005e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e8e:	059a      	lsls	r2, r3, #22
 8005e90:	d4ee      	bmi.n	8005e70 <__smakebuf_r+0x18>
 8005e92:	f023 0303 	bic.w	r3, r3, #3
 8005e96:	f043 0302 	orr.w	r3, r3, #2
 8005e9a:	81a3      	strh	r3, [r4, #12]
 8005e9c:	e7e2      	b.n	8005e64 <__smakebuf_r+0xc>
 8005e9e:	89a3      	ldrh	r3, [r4, #12]
 8005ea0:	6020      	str	r0, [r4, #0]
 8005ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ea6:	81a3      	strh	r3, [r4, #12]
 8005ea8:	9b01      	ldr	r3, [sp, #4]
 8005eaa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005eae:	b15b      	cbz	r3, 8005ec8 <__smakebuf_r+0x70>
 8005eb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f000 f81d 	bl	8005ef4 <_isatty_r>
 8005eba:	b128      	cbz	r0, 8005ec8 <__smakebuf_r+0x70>
 8005ebc:	89a3      	ldrh	r3, [r4, #12]
 8005ebe:	f023 0303 	bic.w	r3, r3, #3
 8005ec2:	f043 0301 	orr.w	r3, r3, #1
 8005ec6:	81a3      	strh	r3, [r4, #12]
 8005ec8:	89a3      	ldrh	r3, [r4, #12]
 8005eca:	431d      	orrs	r5, r3
 8005ecc:	81a5      	strh	r5, [r4, #12]
 8005ece:	e7cf      	b.n	8005e70 <__smakebuf_r+0x18>

08005ed0 <_fstat_r>:
 8005ed0:	b538      	push	{r3, r4, r5, lr}
 8005ed2:	4d07      	ldr	r5, [pc, #28]	@ (8005ef0 <_fstat_r+0x20>)
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	4608      	mov	r0, r1
 8005eda:	4611      	mov	r1, r2
 8005edc:	602b      	str	r3, [r5, #0]
 8005ede:	f7fa fdeb 	bl	8000ab8 <_fstat>
 8005ee2:	1c43      	adds	r3, r0, #1
 8005ee4:	d102      	bne.n	8005eec <_fstat_r+0x1c>
 8005ee6:	682b      	ldr	r3, [r5, #0]
 8005ee8:	b103      	cbz	r3, 8005eec <_fstat_r+0x1c>
 8005eea:	6023      	str	r3, [r4, #0]
 8005eec:	bd38      	pop	{r3, r4, r5, pc}
 8005eee:	bf00      	nop
 8005ef0:	200002fc 	.word	0x200002fc

08005ef4 <_isatty_r>:
 8005ef4:	b538      	push	{r3, r4, r5, lr}
 8005ef6:	4d06      	ldr	r5, [pc, #24]	@ (8005f10 <_isatty_r+0x1c>)
 8005ef8:	2300      	movs	r3, #0
 8005efa:	4604      	mov	r4, r0
 8005efc:	4608      	mov	r0, r1
 8005efe:	602b      	str	r3, [r5, #0]
 8005f00:	f7fa fdea 	bl	8000ad8 <_isatty>
 8005f04:	1c43      	adds	r3, r0, #1
 8005f06:	d102      	bne.n	8005f0e <_isatty_r+0x1a>
 8005f08:	682b      	ldr	r3, [r5, #0]
 8005f0a:	b103      	cbz	r3, 8005f0e <_isatty_r+0x1a>
 8005f0c:	6023      	str	r3, [r4, #0]
 8005f0e:	bd38      	pop	{r3, r4, r5, pc}
 8005f10:	200002fc 	.word	0x200002fc

08005f14 <_init>:
 8005f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f16:	bf00      	nop
 8005f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f1a:	bc08      	pop	{r3}
 8005f1c:	469e      	mov	lr, r3
 8005f1e:	4770      	bx	lr

08005f20 <_fini>:
 8005f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f22:	bf00      	nop
 8005f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f26:	bc08      	pop	{r3}
 8005f28:	469e      	mov	lr, r3
 8005f2a:	4770      	bx	lr
